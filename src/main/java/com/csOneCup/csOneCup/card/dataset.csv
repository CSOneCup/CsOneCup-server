연번,유형,메인 카테고리,제목,질문,보기1,보기2,보기3,보기4,정답,해설
1,4지선다,운영체제,임시제목,운영 체제가 제공하는 기능에 해당하지 않는 것은 무엇인가요?,메모리 관리,CPU 스케줄링,애플리케이션 개발,입출력 관리,3,운영 체제의 주요 기능은 자원 관리와 시스템 보호입니다. 애플리케이션 개발은 운영 체제의 기능이 아니라 개발 도구나 IDE가 수행하는 역할입니다.
2,4지선다,운영체제,임시제목,프로세스 상태 중 'Blocked' 상태는 어떤 경우에 발생하나요?,CPU가 할당된 상태,프로세스가 생성되는 중,입출력(I/O) 작업을 기다리는 중,실행을 마친 상태,3,Blocked 상태는 프로세스가 I/O 요청을 기다리거나 특정 이벤트가 발생하기를 기다리는 상황에서 발생합니다. 이 상태에서는 CPU가 할당되지 않습니다.
3,4지선다,운영체제,임시제목,다음 중 메모리 단편화(fragmentation)에 관한 설명으로 옳은 것은 무엇인가요?,외부 단편화는 고정 분할에서 발생한다.,내부 단편화는 할당되지 않은 메모리 공간을 나타낸다.,외부 단편화는 메모리에 작은 조각이 남아 프로세스를 할당하지 못하는 문제이다.,내부 단편화는 연속적인 메모리 할당에서 발생하지 않는다.,3,"외부 단편화는 메모리 공간이 조각화되어 프로세스가 할당되지 못하는 문제를 의미합니다. 메모리의 빈 공간이 있지만, 연속된 크기의 메모리가 부족해 할당이 어려운 상황입니다."
4,4지선다,운영체제,임시제목,MMU(Memory Management Unit)의 주요 기능이 아닌 것은 무엇인가요?,논리적 주소를 물리적 주소로 매핑,메모리 보호,프로세스 스케줄링,주소 바인딩,2,MMU는 논리적 주소를 물리적 주소로 변환하고 메모리 보호를 담당하는 장치입니다. 프로세스 스케줄링은 운영 체제가 수행하는 별도의 작업입니다.
5,4지선다,운영체제,임시제목,프로세스 간 통신 방식 중에서 특정 주기마다 CPU가 장치 상태를 확인하여 이벤트를 처리하는 방식은 무엇인가요?,인터럽트,폴링(Polling),DMA,페이지 교체,2,"폴링(Polling)은 CPU가 주기적으로 장치 상태를 확인하여 이벤트를 처리하는 방식으로, 인터럽트와 달리 CPU 자원을 소모하는 단점이 있습니다."
6,4지선다,운영체제,임시제목,사용자 모드와 커널 모드를 구분하는 이유는 무엇인가요?,메모리 사용량을 줄이기 위해,다중 프로그래밍을 구현하기 위해,시스템 자원을 보호하기 위해,CPU 성능을 높이기 위해,3,"사용자 모드와 커널 모드를 구분하는 이유는 시스템 자원을 보호하기 위함입니다. 커널 모드에서는 운영 체제의 중요한 작업을 수행하며, 잘못된 명령이 시스템에 영향을 미칠 수 있습니다."
7,4지선다,운영체제,임시제목,페이징에서 발생하는 메모리 접근 속도 저하 문제를 해결하기 위해 사용되는 하드웨어 장치는 무엇인가요?,DMA,TLB (Translation Look-aside Buffer),MMU,PCB,2,TLB는 메모리 접근 속도를 개선하기 위해 주소 변환 정보를 캐싱하는 장치입니다. 이를 통해 페이지 테이블을 매번 조회할 필요 없이 빠르게 메모리에 접근할 수 있습니다.
8,4지선다,운영체제,임시제목,데드락의 4가지 조건 중 한 프로세스가 자원을 점유하면서 다른 자원을 얻기 위해 대기하는 조건은 무엇인가요?,Mutual Exclusion,Hold and Wait,No Preemption,Circular Wait,2,"Hold and Wait는 데드락의 발생 조건 중 하나로, 프로세스가 이미 자원을 점유한 상태에서 다른 자원을 기다리는 상황을 의미합니다. 이 조건이 충족될 때 데드락이 발생할 수 있습니다."
9,4지선다,운영체제,임시제목,"가상 메모리에서, 프로세스가 참조하려는 페이지가 메모리에 없을 때 발생하는 현상은 무엇인가요?",캐시 미스,페이지 부재 (Page Fault),버스 에러,세그먼트 결함,2,"페이지 부재(Page Fault)는 프로세스가 요청한 페이지가 메모리에 없을 때 발생하는 현상입니다. 이 경우, 해당 페이지를 디스크에서 메모리로 불러와야 하므로 시간이 소요됩니다."
10,4지선다,운영체제,임시제목,다음 중 스레드의 정의에 가장 부합하는 것은 무엇인가요?,프로세스와 동일한 실행 단위,프로세스 내에서의 실행 단위,서로 독립적인 실행 단위,데이터 저장 단위,2,스레드는 프로세스 내에서 독립적으로 실행되는 작업 단위입니다. 프로세스 내에 여러 스레드를 두어 자원을 공유하며 실행할 수 있습니다.
11,4지선다,운영체제,임시제목,프로세스의 상태 중 CPU를 점유하고 있는 상태를 무엇이라고 하나요?,Ready,Running,Waiting,Blocked,2,Running 상태는 프로세스가 CPU를 점유하고 실제로 명령을 수행 중인 상태를 의미합니다. 이 상태에서 프로세스는 CPU의 자원을 독점하여 작업을 진행합니다.
12,4지선다,운영체제,임시제목,다음 중 임계 구역(Critical Section)을 보호하기 위한 방법으로 옳은 것은 무엇인가요?,페이지 교체,스케줄링,세마포어와 뮤텍스 사용,캐시 메모리 사용,3,"세마포어와 뮤텍스는 동기화 문제를 해결하기 위한 도구로, 임계 구역에 동시에 접근하려는 여러 프로세스를 제어하여 자원 충돌을 방지합니다."
13,4지선다,운영체제,임시제목,다중 프로세스를 관리하는 스케줄링 방식 중 우선순위가 높은 프로세스에 의해 우선순위가 낮은 프로세스가 무한 대기하게 되는 문제는 무엇인가요?,데드락,스레싱,스피닝,기아 상태 (Starvation),4,기아 상태(Starvation)는 우선순위 스케줄링에서 낮은 우선순위 프로세스가 무한히 대기하는 상황을 말합니다. 이를 방지하기 위해 우선순위 조정 방법인 Aging을 사용할 수 있습니다.
14,4지선다,운영체제,임시제목,페이징 시스템에서 메모리에 비어 있는 프레임이 없을 때 기존 페이지를 디스크로 내보내는 작업을 무엇이라고 하나요?,페이지 교체(Page Replacement),페이지 부재(Page Fault),주소 바인딩(Address Binding),동적 로딩(Dynamic Loading),1,페이지 교체(Page Replacement)는 메모리가 가득 찼을 때 사용되지 않는 페이지를 디스크로 내보내는 작업입니다. 이를 통해 메모리에 새로운 페이지를 적재할 공간을 확보합니다.
15,4지선다,운영체제,임시제목,프로세스 간의 통신에서 공유된 메모리 공간을 이용하는 방식은 무엇인가요?,메모리 매핑,메시지 전달,파이프(Pipe),공유 메모리(Shared Memory),4,공유 메모리(Shared Memory)는 서로 다른 프로세스가 데이터를 공유할 수 있도록 메모리 공간을 제공하는 IPC 방식입니다. 이를 통해 효율적인 프로세스 간 통신이 가능합니다.
16,4지선다,운영체제,임시제목,다음 중 메모리 할당 시 내부 단편화가 발생하는 경우는 언제인가요?,가변 분할 메모리 할당 방식에서 발생,고정 분할 메모리 할당 방식에서 발생,페이징 시스템에서 모든 페이지가 동일 크기일 때 발생,세그먼트 시스템에서 다양한 크기의 세그먼트를 사용,2,고정 분할 메모리 할당 방식에서는 일정 크기의 메모리를 할당하여 내부 단편화가 발생할 수 있습니다. 남는 메모리 공간이 효율적으로 사용되지 않아 낭비가 생깁니다.
17,4지선다,운영체제,임시제목,"커널이 프로세스마다 관리하는 데이터 구조로, 프로세스 상태와 관련 정보를 저장하는 것은 무엇인가요?",MMU,PCB (Process Control Block),DMA,세그먼트 테이블,2,PCB는 프로세스의 상태 정보를 관리하는 운영 체제의 데이터 구조입니다. 이 정보는 프로세스가 실행될 때 필요한 문맥 정보를 포함하고 있습니다.
18,4지선다,운영체제,임시제목,다음 중 데드락의 발생 조건이 아닌 것은 무엇인가요?,상호 배제(Mutual Exclusion),자원 할당과 대기(Hold and Wait),우선순위 순환(Priority Cycle),비선점(No Preemption),3,"우선순위 순환(Priority Cycle)은 데드락의 발생 조건이 아닙니다. 데드락은 상호 배제, 자원 할당과 대기, 비선점, 순환 대기의 4가지 조건을 모두 충족할 때 발생합니다."
19,4지선다,운영체제,임시제목,프로세스의 주소 공간을 논리적인 기능 단위로 나누어 메모리에 할당하는 방식은 무엇인가요?,페이징(Paging),세그먼테이션(Segmentation),스와핑(Swapping),연속 할당(Contiguous Allocation),2,"세그먼테이션(Segmentation)은 프로그램을 논리적 단위로 나누어 메모리에 할당하는 방식으로, 각 세그먼트는 크기가 다양합니다. 이를 통해 메모리를 효율적으로 관리할 수 있습니다."
20,4지선다,운영체제,임시제목,"프로세스가 여러 개의 스레드로 구성될 때, 이들 스레드가 공유하는 공간이 아닌 것은 무엇인가요?",코드(Code),데이터(Data),스택(Stack),파일 시스템,3,"스택(Stack)은 스레드 간 독립적으로 관리되는 메모리 공간으로, 함수 호출 시 지역 변수와 리턴 주소를 저장합니다. 코드와 데이터는 스레드 간에 공유됩니다."
21,4지선다,운영체제,임시제목,프로세스가 실행 중에 CPU를 다른 프로세스에 양도할 수 있는 상황은?,CPU 바인딩 완료,인터럽트 발생 시,프로세스가 종료될 때,PCB 생성 시,2,CPU를 다른 프로세스에 양도할 수 있는 상황 중 하나는 인터럽트 발생 시입니다. 인터럽트가 발생하면 현재 작업이 멈추고 다른 프로세스가 CPU를 사용할 수 있습니다.
22,4지선다,운영체제,임시제목,페이지 교체 알고리즘에서 '가장 오래 참조되지 않은 페이지를 교체'하는 방식은?,FIFO,LRU,LFU,SJF,2,"LRU(Least Recently Used)는 가장 오래 참조되지 않은 페이지를 교체하는 방식으로, 시간 지역성 원리를 활용하여 페이지 부재를 줄입니다."
23,4지선다,운영체제,임시제목,멀티 프로세스와 멀티 스레드의 차이점은 무엇인가요?,메모리를 더 적게 사용,프로세스 간 자원 공유가 용이함,스레드는 독립 실행 가능,멀티 스레드는 자원을 공유함,4,멀티 스레드는 프로세스 내에서 자원을 공유하며 작업을 수행하기 때문에 자원 공유가 용이합니다. 멀티 프로세스는 별도의 자원 할당이 필요하여 메모리 소모가 더 큽니다.
24,4지선다,운영체제,임시제목,페이징 기법에서 사용하는 데이터 구조는 무엇인가요?,세그먼트 테이블,페이지 테이블,TLB,메모리 매핑 테이블,2,페이징 기법에서 논리 주소와 물리 주소를 매핑하는 데 사용하는 데이터 구조는 페이지 테이블입니다. 이를 통해 페이지 번호와 물리적 주소를 연결합니다.
25,4지선다,운영체제,임시제목,스레드를 생성하는 것이 프로세스를 생성하는 것보다 더 효율적인 이유는?,프로세스는 메모리를 공유하지 않기 때문입니다,스레드는 독립된 주소 공간을 가지기 때문,스레드는 프로세스와 메모리 자원을 공유할 수 있기 때문입니다,프로세스는 스레드보다 더 빠르기 때문입니다,3,"스레드는 프로세스의 메모리 자원을 공유하며, 프로세스에 비해 메모리와 CPU 자원을 더 효율적으로 사용할 수 있어 생성 속도가 빠릅니다."
26,4지선다,운영체제,임시제목,Deadlock이 발생하기 위해 필요한 조건 중 '순환 대기'의 의미는?,프로세스가 동시에 자원을 요청함,프로세스가 순서대로 자원을 요청함,프로세스가 각기 다른 자원을 기다림,프로세스가 서로 자원을 기다리는 순환 구조를 형성함,4,"순환 대기는 데드락 발생 조건 중 하나로, 프로세스가 서로의 자원을 기다리는 순환 구조를 형성할 때 발생합니다. 이로 인해 교착 상태가 발생할 수 있습니다."
27,4지선다,운영체제,임시제목,동적 로딩(Dynamic Loading)의 장점은 무엇인가요?,메모리 사용량이 줄어듭니다,실행 속도가 향상됩니다,모든 프로그램을 한 번에 로드합니다,CPU가 효율적으로 사용됩니다,1,"동적 로딩은 필요한 시점에 프로그램 일부만 메모리에 적재하므로 메모리 사용량을 줄이고, 메모리 효율성을 높이는 장점이 있습니다."
28,4지선다,운영체제,임시제목,다음 중 공유 메모리(Shared Memory) 방식의 특징은?,메모리 낭비가 발생합니다,프로세스 간 데이터 교환이 빠릅니다,프로세스 종료 시 데이터가 자동 삭제됩니다,별도의 동기화 기법이 필요 없습니다,2,"공유 메모리는 프로세스 간에 데이터를 빠르게 교환할 수 있는 방식입니다. 하지만, 동기화 문제가 발생할 수 있어 별도의 동기화 기법이 필요합니다."
29,4지선다,운영체제,임시제목,Demand Paging에서 페이지 부재가 발생할 때 가장 먼저 해야 할 일은?,페이지를 메모리에 적재합니다,프로세스를 종료합니다,페이지 접근이 적법한지 확인합니다,TLB에 페이지를 추가합니다,3,"페이지 부재가 발생할 때 접근 권한이 적법한지 확인하는 것이 첫 번째 단계입니다. 접근 권한이 없으면 프로그램을 종료하고, 있으면 페이지를 메모리에 적재합니다."
30,4지선다,운영체제,임시제목,Clock Algorithm은 어떤 알고리즘의 근사치인가요?,FIFO,LRU,LFU,Round Robin,2,"Clock Algorithm은 LRU를 근사하여 구현된 알고리즘입니다. 하드웨어 지원을 통해 자주 사용된 페이지를 유지하고, 오래된 페이지를 교체합니다."
31,4지선다,네트워크,임시제목,TCP와 UDP의 차이점은 무엇인가요?,연결 지향성/비연결 지향성,비연결 지향성/연결 지향성,데이터 암호화 지원/비암호화 지원,비암호화 지원/데이터 암호화 지원,1,"TCP는 연결 지향적이며 신뢰성 있는 데이터 전송을 지원하고, UDP는 연결 없이 속도 중심의 비연결 지향 프로토콜입니다."
32,4지선다,네트워크,임시제목,DNS와 DHCP가 사용하는 프로토콜은 무엇인가요?,TCP,UDP,TCP와 UDP 모두 사용,HTTP,2,DNS와 DHCP는 연결 설정이 필요 없고 빠른 응답을 요구하기 때문에 비연결 지향적인 UDP 프로토콜을 사용합니다.
33,4지선다,네트워크,임시제목,TCP에서 3-way handshake가 필요한 이유는 무엇인가요?,통신 속도 향상,데이터 보안 강화,연결 설정을 위한 신뢰성 확보,수신자 주소 검증,3,"3-way handshake는 연결 설정을 위한 절차로, TCP의 신뢰성 있는 데이터 전송을 위한 기반을 마련합니다."
34,4지선다,네트워크,임시제목,흐름제어(Flow Control)의 주요 목적은 무엇인가요?,네트워크 혼잡 방지,데이터 전송 속도 제한,수신자의 오버플로 방지,IP 주소 확인,3,"흐름제어는 수신자의 오버플로를 방지하기 위한 것으로, 수신자 버퍼가 가득 차지 않도록 송신 속도를 조절합니다."
35,4지선다,네트워크,임시제목,혼잡제어에서 AIMD는 어떤 방식으로 동작하나요?,느리게 감소/빠르게 증가,빠르게 감소/느리게 증가,선형 증가/지수 감소,지수 증가/선형 감소,3,AIMD는 선형 증가(1씩 증가)와 지수 감소(절반 감소)를 통해 네트워크 혼잡을 조절합니다.
36,4지선다,네트워크,임시제목,TCP와 UDP에서 Checksum은 어떤 역할을 하나요?,데이터 무결성 확인,데이터 압축 지원,연결 속도 향상,연결 안전성 강화,1,Checksum은 데이터 전송 과정 중 데이터의 무결성을 확인하는 데 사용됩니다.
37,4지선다,네트워크,임시제목,슬라이딩 윈도우 방식에서 GO-BACK-N의 특징은 무엇인가요?,오류 발생 프레임만 재전송,오류 발생 이후 프레임 모두 재전송,재전송하지 않음,일정 간격으로 재전송,2,"GO-BACK-N은 오류 발생 이후의 프레임들을 모두 재전송하는 방식으로, 재전송 부하가 큰 단점이 있습니다."
38,4지선다,네트워크,임시제목,OSI 7계층 중 물리계층의 주요 역할은 무엇인가요?,전기 신호 변환,MAC 주소 지정,데이터 라우팅,암호화,1,물리계층은 데이터를 전기 신호로 변환하여 전송하는 역할을 합니다.
39,4지선다,네트워크,임시제목,TCP의 4-way handshake는 언제 사용되나요?,연결 설정,연결 해제,오류 검증,데이터 흐름 제어,2,"4-way handshake는 TCP 연결 해제 시 사용되며, FIN과 ACK 패킷을 통해 연결을 안전하게 종료합니다."
40,4지선다,네트워크,임시제목,IP 주소와 MAC 주소를 매핑해주는 프로토콜은 무엇인가요?,DNS,DHCP,ARP,ICMP,3,"ARP는 IP 주소와 MAC 주소를 매핑하여, 로컬 네트워크에서 IP를 기반으로 통신이 가능하게 합니다."
41,4지선다,네트워크,임시제목,서브넷 마스크는 어떤 역할을 하나요?,호스트 및 네트워크 주소 구분,데이터 압축 지원,연결 보안 강화,데이터 속도 조절,1,"서브넷 마스크는 IP 주소에서 호스트와 네트워크 주소를 구분하여, 네트워크의 범위를 설정하는 데 사용됩니다."
42,4지선다,네트워크,임시제목,UDP와 TCP 패킷 구조의 차이점은 무엇인가요?,TCP는 간단한 헤더 구조,UDP는 많은 필드 사용,"TCP는 복잡한 헤더, UDP는 단순한 헤더",둘 다 동일한 헤더 구조를 가짐,3,"TCP는 연결 관리를 위한 복잡한 헤더 구조를 갖고 있고, UDP는 단순히 데이터 전송을 위한 필드만 포함하고 있어 헤더 구조가 단순합니다."
43,4지선다,네트워크,임시제목,DNS의 역할은 무엇인가요?,IP 주소를 도메인으로 변환,MAC 주소를 IP로 변환,도메인 네임을 IP 주소로 변환,데이터 압축 및 전송,3,"DNS는 도메인 네임을 IP 주소로 변환하여, 사용자가 쉽게 웹사이트에 접근할 수 있도록 합니다."
44,4지선다,네트워크,임시제목,TCP/IP 4계층에서 전송 계층의 역할은 무엇인가요?,데이터 암호화,패킷 분할 및 재조립,IP 주소 할당,전송 속도 조절,2,"전송 계층은 큰 데이터를 작은 패킷으로 분할하고, 이를 수신측에서 재조립하는 역할을 합니다."
45,4지선다,네트워크,임시제목,NAT(Network Address Translation)의 주된 목적은 무엇인가요?,보안 강화,IP 주소 절약,데이터 흐름 제어,MAC 주소 변경,2,NAT는 공인 IP 주소를 절약하기 위해 사설 IP 주소를 공인 IP 주소로 변환하여 외부 네트워크와 통신할 수 있도록 합니다.
46,4지선다,네트워크,임시제목,HTTP와 HTTPS의 차이점은 무엇인가요?,"HTTP는 암호화, HTTPS는 비암호화","HTTP는 비암호화, HTTPS는 암호화",HTTP는 더 빠름,둘 다 암호화 기능이 없음,2,"HTTP는 비암호화 통신을 하고, HTTPS는 SSL/TLS를 사용해 데이터를 암호화하여 안전하게 통신합니다."
47,4지선다,네트워크,임시제목,DHCP가 사용하는 주요 프로토콜은 무엇인가요?,UDP,TCP,ICMP,ARP,1,DHCP는 연결 설정을 요구하지 않는 UDP 프로토콜을 사용하여 빠르게 IP 주소를 할당합니다.
48,4지선다,네트워크,임시제목,SSL/TLS의 주요 역할은 무엇인가요?,암호화 통신,데이터 압축,네트워크 연결 최적화,IP 주소 할당,1,"SSL/TLS는 데이터를 암호화하여 전송함으로써, 네트워크 보안을 강화하는 역할을 합니다."
49,4지선다,네트워크,임시제목,MAC 주소를 IP 주소로 변환하는 프로토콜은 무엇인가요?,DHCP,ARP,ICMP,DNS,2,"ARP는 IP 주소에 해당하는 MAC 주소를 찾기 위한 프로토콜로, 로컬 네트워크에서 기기의 물리적 주소를 확인합니다."
50,4지선다,네트워크,임시제목,TCP/IP 모델에서 세션 계층에 해당하는 기능은 무엇인가요?,데이터 암호화,데이터 압축,연결 관리,IP 주소 변경,3,"세션 계층은 두 장치 간의 연결 설정과 종료를 관리하며, 데이터 전송이 안정적으로 이루어지도록 하는 역할을 수행합니다."
51,4지선다,데이터베이스,임시제목,SQL의 역할은 무엇인가요?,"데이터베이스의 검색, 관리, 데이터베이스 스키마 생성",프로그래밍 언어로 데이터 시각화,서버 관리를 위한 언어,네트워크 보안을 위한 언어,1,"SQL은 관계형 데이터베이스 관리 시스템에서 데이터를 관리하고 검색하며, 스키마 생성 등을 위한 언어로 설계되었습니다."
52,4지선다,데이터베이스,임시제목,트랜잭션의 원자성(Atomicity)이란 무엇인가요?,트랜잭션이 부분적으로 적용될 수 있음,트랜잭션이 성공하면 모든 연산이 반영됨,트랜잭션이 실패하면 일부만 반영됨,트랜잭션 결과가 즉시 보임,2,원자성은 트랜잭션의 연산이 모두 반영되거나 모두 반영되지 않아야 함을 의미합니다.
53,4지선다,데이터베이스,임시제목,트랜잭션의 일관성(Consistency)이란 무엇인가요?,트랜잭션 후 데이터의 일관성 유지,모든 트랜잭션이 동시에 실행,트랜잭션이 동시에 실행 가능,트랜잭션 중 일부 연산 취소 가능,1,일관성은 트랜잭션 완료 후 데이터베이스가 일관된 상태를 유지해야 함을 뜻합니다.
54,4지선다,데이터베이스,임시제목,다음 중 Isolation 수준이 가장 낮은 것은 무엇인가요?,READ UNCOMMITTED,READ COMMITTED,REPEATABLE READ,SERIALIZABLE,1,READ UNCOMMITTED는 트랜잭션이 커밋되지 않은 데이터를 다른 트랜잭션이 읽을 수 있어 격리 수준이 가장 낮습니다.
55,4지선다,데이터베이스,임시제목,트랜잭션의 독립성(Isolation)이란 무엇인가요?,트랜잭션이 동시에 처리될 수 없음,트랜잭션이 다른 트랜잭션에 영향 없이 실행됨,트랜잭션이 실패해도 반영됨,트랜잭션이 즉시 반영됨,2,독립성은 트랜잭션이 다른 트랜잭션의 간섭 없이 독립적으로 실행되어야 함을 뜻합니다.
56,4지선다,데이터베이스,임시제목,트랜잭션의 영속성(Durability)이란 무엇인가요?,트랜잭션 성공 후 데이터가 영구적으로 반영됨,트랜잭션 중 일부만 반영 가능,트랜잭션이 실패하면 즉시 반영됨,트랜잭션이 항상 중단됨,1,영속성은 트랜잭션이 성공적으로 완료되면 그 결과가 영구적으로 반영됨을 의미합니다.
57,4지선다,데이터베이스,임시제목,다음 중 데이터베이스 이상 현상 중 하나가 아닌 것은?,삽입 이상,삭제 이상,수정 이상,갱신 이상,4,"이상 현상에는 삽입, 삭제, 수정 이상이 있으며 갱신 이상은 포함되지 않습니다."
58,4지선다,데이터베이스,임시제목,정규화의 주요 목적은 무엇인가요?,데이터 중복 최소화,데이터 검색 속도 증가,데이터 삭제 용이성,데이터 암호화,1,정규화는 데이터 중복을 줄여 데이터베이스의 일관성을 높이기 위해 수행됩니다.
59,4지선다,데이터베이스,임시제목,후보키(candidate key)의 정의는 무엇인가요?,테이블의 모든 컬럼을 조합한 키,튜플을 유일하게 식별할 수 있는 최소 속성 집합,기본키로만 사용되는 키,외래키로만 사용되는 키,2,후보키는 테이블의 모든 튜플을 유일하게 식별할 수 있는 최소 속성 집합입니다.
60,4지선다,데이터베이스,임시제목,기본키(Primary Key)의 특징은 무엇인가요?,"중복 가능, Null 가능","중복 불가, Null 불가","중복 가능, Null 불가","중복 불가, Null 가능",2,기본키는 데이터의 고유 식별자로 중복과 Null 값을 허용하지 않습니다.
61,4지선다,데이터베이스,임시제목,외래키(Foreign Key)의 역할은 무엇인가요?,중복 데이터 방지,테이블 간의 관계 설정,데이터 삭제 속도 향상,데이터 압축,2,외래키는 다른 테이블의 기본키와 연결하여 테이블 간 관계를 표현합니다.
62,4지선다,데이터베이스,임시제목,클러스터링 인덱스(Clustering Index)의 특징은 무엇인가요?,데이터가 정렬되지 않음,데이터 자체가 정렬되어 저장됨,다수의 인덱스를 허용,외래키와 연관된 인덱스,2,"클러스터링 인덱스는 실제 데이터가 정렬되어 저장되며, 테이블당 하나만 존재할 수 있습니다."
63,4지선다,데이터베이스,임시제목,B-Tree의 B는 무엇을 의미하나요?,Binary,Balanced,Base,Basic,2,B-Tree의 B는 Binary가 아닌 Balanced를 뜻하며 균형을 유지하는 구조입니다.
64,4지선다,데이터베이스,임시제목,다음 중 DDL에 해당하지 않는 명령어는?,CREATE,INSERT,DROP,ALTER,2,INSERT는 DML에 속하며 데이터를 추가하는 명령어입니다.
65,4지선다,데이터베이스,임시제목,인덱스를 설정하면 좋은 경우는 언제인가요?,자주 변경되는 컬럼,데이터 중복이 높은 컬럼,조회가 자주 발생하는 컬럼,테이블 크기가 작은 경우,3,조회가 자주 발생하는 컬럼에 인덱스를 설정하면 검색 성능이 향상됩니다.
66,4지선다,데이터베이스,임시제목,카디널리티(Cardinality)의 정의는 무엇인가요?,모든 데이터 중 유니크한 값의 수,데이터의 총 수,인덱스 키의 크기,데이터베이스의 크기,1,"카디널리티는 테이블의 유니크한 값의 수로, 인덱스 효율성을 높이는 기준입니다."
67,4지선다,데이터베이스,임시제목,트랜잭션에서 발생할 수 있는 Phantom Read는 어떤 현상인가요?,동일한 데이터 두 번 조회 시 값이 달라짐,트랜잭션 내에서 새로 삽입된 데이터가 조회됨,다른 트랜잭션의 미완료 데이터 조회,데이터가 수정되지 않음,2,Phantom Read는 트랜잭션 중간에 새로운 데이터가 삽입되어 결과가 달라지는 현상입니다.
68,4지선다,데이터베이스,임시제목,InnoDB에서 사용되는 MVCC의 역할은 무엇인가요?,여러 버전의 데이터를 보관하여 동시성 제어,데이터 변경 작업을 지연 처리,트랜잭션을 직렬화함,외부 데이터에 접근 제한,1,MVCC는 여러 버전의 데이터를 관리해 트랜잭션 간 격리와 동시성 제어를 지원합니다.
69,4지선다,데이터베이스,임시제목,InnoDB의 Redo Log는 어떤 역할을 하나요?,작업 취소 로그 기록,트랜잭션 실패 시 데이터 복구,트랜잭션 중 일부 작업 취소,트랜잭션 간 간섭 방지,2,Redo Log는 트랜잭션 커밋 후 데이터베이스 장애 발생 시 데이터를 복구하는 데 사용됩니다.
70,4지선다,데이터베이스,임시제목,Insert Buffer란 무엇인가요?,데이터 삽입 시 데이터를 디스크에 바로 저장하는 공간,데이터 삽입 시 인덱스 변경을 지연하는 공간,레코드 삭제 작업을 보관하는 공간,데이터 업데이트 로그,2,Insert Buffer는 인덱스 변경을 지연하여 데이터 삽입 시 성능을 높이는 공간입니다.
71,4지선다,데이터베이스,임시제목,MySQL의 기본 테이블 저장 엔진은 무엇인가요?,MyISAM,InnoDB,Memory,CSV,2,"InnoDB는 MySQL의 기본 테이블 저장 엔진으로, 트랜잭션 지원과 외래키 제약을 제공합니다."
72,4지선다,데이터베이스,임시제목,데이터베이스의 이상(Anomaly) 현상 중 '삽입 이상'이란 무엇인가요?,중복된 데이터를 삽입함,데이터를 삽입할 때 부가적인 정보가 필요함,데이터를 수정할 때 일관성이 깨짐,삭제 시 참조 관계가 유지됨,2,삽입 이상은 데이터를 추가할 때 불필요한 정보까지 함께 입력해야 하는 현상입니다.
73,4지선다,데이터베이스,임시제목,DCL(Data Control Language) 명령어가 아닌 것은 무엇인가요?,GRANT,REVOKE,COMMIT,SELECT,4,SELECT는 DML에 속하며 데이터를 조회하는 명령어입니다.
74,4지선다,데이터베이스,임시제목,MySQL에서 Primary Key가 없는 테이블을 만들 경우 기본으로 생성되는 키는 무엇인가요?,사용자 정의 키,히든 PK,임의의 외래키,명시적 Primary Key,2,Primary Key가 없을 경우 InnoDB 엔진은 히든 PK를 자동으로 생성하여 데이터를 관리합니다.
75,4지선다,데이터베이스,임시제목,트랜잭션의 격리 수준 중 Phantom Read가 발생할 수 있는 격리 수준은?,READ COMMITTED,READ UNCOMMITTED,SERIALIZABLE,REPEATABLE READ,4,REPEATABLE READ 격리 수준에서는 Phantom Read가 발생할 수
76,4지선다,데이터베이스,임시제목,SQL에서 VIEW의 역할은 무엇인가요?,테이블 간 관계 설정,데이터 보안과 특정 데이터 조회,데이터를 물리적으로 저장,데이터를 인덱싱,2,"VIEW는 가상 테이블로, 특정 데이터만을 제공하여 보안과 조회 효율성을 높입니다."
77,4지선다,데이터베이스,임시제목,DDL에 해당하는 명령어는 무엇인가요?,INSERT,ALTER,DELETE,SELECT,2,"ALTER는 DDL에 속하는 명령어로, 데이터 구조를 수정하는 역할을 합니다."
78,4지선다,데이터베이스,임시제목,트랜잭션에서 Dirty Read는 어떤 현상인가요?,커밋되지 않은 데이터를 읽음,중복된 데이터를 삽입,데이터 조회 시 갱신된 데이터 조회,데이터를 정렬하여 조회,1,Dirty Read는 커밋되지 않은 데이터를 읽어 데이터의 무결성이 보장되지 않는 현상입니다.
79,4지선다,데이터베이스,임시제목,외래키가 필요한 이유는 무엇인가요?,데이터 중복을 허용,테이블 간 관계를 설정,테이블의 구조를 변경,데이터를 정렬,2,외래키는 테이블 간 관계를 설정하여 데이터 무결성을 유지하는 데 사용됩니다.
80,4지선다,데이터베이스,임시제목,클러스터링 인덱스와 논 클러스터링 인덱스의 차이는 무엇인가요?,클러스터링 인덱스는 다수 가능,논 클러스터링 인덱스는 데이터를 직접 저장,클러스터링 인덱스는 데이터 자체를 정렬,논 클러스터링 인덱스는 유일해야 함,3,클러스터링 인덱스는 데이터 자체를 정렬하여 저장하는 인덱스입니다.
81,4지선다,데이터베이스,임시제목,MySQL에서 테이블 간 데이터를 연결하여 조회할 때 사용되는 것은 무엇인가요?,JOIN,INDEX,VIEW,GROUP BY,1,JOIN은 여러 테이블의 데이터를 관계에 따라 연결하여 조회할 수 있도록 합니다.
82,4지선다,데이터베이스,임시제목,NoSQL의 특징으로 올바른 것은 무엇인가요?,엄격한 스키마 구조,관계형 모델 사용,스키마 유연성,Join 사용 가능,3,NoSQL은 스키마가 유연해 구조를 자유롭게 조정할 수 있습니다.
83,4지선다,데이터베이스,임시제목,MySQL의 InnoDB 엔진에서 데이터를 복구하는 데 사용되는 것은 무엇인가요?,Undo Log,Insert Buffer,Redo Log,Data Buffer,3,Redo Log는 트랜잭션 커밋 후 발생한 장애 시 데이터를 복구하는 데 사용됩니다.
84,4지선다,데이터베이스,임시제목,DB Connection Pool의 주된 이점은 무엇인가요?,접속 속도 저하 방지,데이터 일관성 유지,접속 대기 시간 단축,데이터 처리 속도 감소,3,DB Connection Pool은 대기 시간을 줄여 접속 속도를 개선합니다.
85,4지선다,데이터베이스,임시제목,SQL에서 DISTINCT 키워드는 무엇을 하나요?,테이블을 삭제,중복 데이터를 제거,테이블 간 데이터 결합,특정 데이터를 잠금,2,DISTINCT는 중복된 데이터를 제거하여 고유한 결과만 조회할 때 사용됩니다.
86,4지선다,자료구조,임시제목,Array의 장점은 무엇인가요?,삽입과 삭제가 빠름,메모리 사용 효율성이 높음,인덱스로 원소에 빠르게 접근 가능,무한히 많은 요소 저장 가능,3,Array는 인덱스를 통해 O(1) 시간에 원소에 접근할 수 있어 random access가 가능하다는 장점이 있습니다.
87,4지선다,자료구조,임시제목,Linked List의 삽입과 삭제 시간 복잡도는 무엇인가요?,O(1),O(n),O(log n),O(n^2),1,Linked List에서는 삽입과 삭제 시 포인터만 수정하면 되기 때문에 O(1)의 시간 복잡도를 가집니다.
88,4지선다,자료구조,임시제목,Stack의 가장 큰 특징은 무엇인가요?,FIFO 구조,LIFO 구조,스택 크기 조절 가능,요소 접근 속도가 빠름,2,"Stack은 LIFO 구조로, 가장 나중에 들어간 원소가 먼저 나오는 구조입니다."
89,4지선다,자료구조,임시제목,Queue에서 먼저 삭제되는 원소는 무엇인가요?,마지막에 들어온 원소,아무 원소나 선택 가능,가장 먼저 들어온 원소,중간에 들어온 원소,3,"Queue는 FIFO 구조로, 가장 먼저 들어온 원소가 가장 먼저 삭제됩니다."
90,4지선다,자료구조,임시제목,Binary Tree에서 레벨 0에 위치한 노드는 무엇인가요?,Leaf Node,Root Node,Internal Node,Child Node,2,"트리의 최상위에 위치한 노드를 Root Node라고 하며, 레벨 0에 위치합니다."
91,4지선다,자료구조,임시제목,이진 탐색 트리(BST)의 특성이 아닌 것은?,모든 노드의 키는 유일함,왼쪽 자식은 부모보다 큼,오른쪽 자식은 부모보다 큼,재귀적으로 이진 탐색 트리를 이룸,2,이진 탐색 트리에서 왼쪽 자식은 부모보다 작아야 합니다.
92,4지선다,자료구조,임시제목,Full Binary Tree의 특징은 무엇인가요?,모든 노드가 0개 또는 2개의 자식을 가짐,모든 레벨이 꽉 찬 구조,하나의 노드만 존재,모든 노드가 같은 레벨에 위치,1,Full Binary Tree는 모든 노드가 0개 또는 2개의 자식 노드를 가집니다.
93,4지선다,자료구조,임시제목,Complete Binary Tree의 정의는 무엇인가요?,모든 레벨이 완전히 채워짐,"위에서 아래로, 왼쪽에서 오른쪽으로 차곡차곡 채워짐",모든 노드가 같은 높이에 위치,루트 노드만 존재,2,"Complete Binary Tree는 위에서 아래로, 왼쪽에서 오른쪽으로 순서대로 노드를 채운 이진 트리입니다."
94,4지선다,자료구조,임시제목,Binary Heap에서 최소값을 찾는 데 걸리는 시간 복잡도는?,O(log n),O(n),O(1),O(n^2),3,Min Heap에서는 루트 노드에 최소값이 있으므로 O(1) 시간에 최소값을 찾을 수 있습니다.
95,4지선다,자료구조,임시제목,Red-Black Tree의 삽입 시 노드의 기본 색상은?,Black,Red,Gray,White,2,Red-Black Tree에서 삽입되는 노드의 색상은 기본적으로 Red로 설정됩니다.
96,4지선다,자료구조,임시제목,Hash Table에서 충돌이 발생했을 때 충돌 해결 방법이 아닌 것은?,Separate Chaining,Open Addressing,Quadratic Probing,Sorting,4,"Sorting은 충돌 해결 방법이 아니며, Separate Chaining과 Open Addressing이 대표적인 충돌 해결 방법입니다."
97,4지선다,자료구조,임시제목,해시 테이블의 평균 검색 시간 복잡도는 무엇인가요?,O(n),O(log n),O(1),O(n^2),3,해시 테이블은 평균적으로 O(1)의 검색 시간을 가집니다.
98,4지선다,자료구조,임시제목,Separate Chaining 방식에서 충돌이 발생하면 어떤 자료구조를 주로 사용하나요?,Stack,Linked List,Queue,Tree,2,Separate Chaining 방식에서는 충돌이 발생하면 각 버킷에 연결 리스트를 만들어 충돌을 해결합니다.
99,4지선다,자료구조,임시제목,그래프에서 방향성이 있는 그래프를 무엇이라 하나요?,Weighted Graph,Digraph,Tree,Cycle Graph,2,방향성이 있는 그래프는 Directed Graph(Digraph)라고 부릅니다.
100,4지선다,자료구조,임시제목,그래프의 모든 간선에 가중치가 같은 경우 최단 경로를 찾는 알고리즘은?,Kruskal's Algorithm,Prim's Algorithm,BFS,DFS,3,모든 간선의 가중치가 같을 때는 BFS를 사용하여 최단 경로를 찾을 수 있습니다.
101,4지선다,자료구조,임시제목,Kruskal Algorithm의 기본 동작은 무엇인가요?,가장 큰 가중치 간선부터 연결,가중치가 작은 간선부터 연결하며 사이클 검사,루트 노드부터 연결 시작,모든 간선을 임의 순서로 연결,2,Kruskal Algorithm은 최소 가중치 간선부터 선택하여 사이클이 생기지 않도록 연결해 나갑니다.
102,4지선다,자료구조,임시제목,Prim Algorithm의 초기 상태는 무엇인가요?,모든 간선을 포함,모든 정점을 포함,한 개의 정점만 포함,한 개의 간선만 포함,3,Prim Algorithm은 한 개의 정점에서 시작하여 인접한 최소 가중치 간선을 추가하면서 MST를 구성합니다.
103,4지선다,자료구조,임시제목,그래프 탐색에서 DFS의 자료구조로 주로 사용되는 것은?,Queue,Stack,Heap,Tree,2,DFS에서는 Stack을 사용하여 깊이 우선 탐색을 수행합니다.
104,4지선다,자료구조,임시제목,그래프 탐색에서 BFS의 자료구조로 주로 사용되는 것은?,Stack,Tree,Queue,List,3,BFS는 Queue를 사용하여 너비 우선 탐색을 수행합니다.
105,4지선다,자료구조,임시제목,배열 기반의 자료구조로 구현된 Complete Binary Tree의 장점은 무엇인가요?,빠른 삽입과 삭제,정렬된 형태 유지,메모리 사용량 감소,random access 가능,4,배열 기반의 Complete Binary Tree는 배열 인덱스를 통해 노드에 빠르게 접근할 수 있습니다.
106,4지선다,자료구조,임시제목,Tree 자료구조의 비선형적 특성은 무엇인가요?,계층적 관계 표현,선형적 관계 표현,임의의 데이터 접근 불가,정렬된 데이터 저장,1,Tree 자료구조는 계층적 관계를 표현하는 비선형 자료구조입니다.
107,4지선다,자료구조,임시제목,트리의 높이를 구할 때 가장 높은 노드의 레벨을 무엇이라 하나요?,Depth,Leaf,Height,Root,3,트리의 가장 높은 노드의 레벨을 Height라고 부릅니다.
108,4지선다,자료구조,임시제목,이진 트리의 왼쪽 자식 노드에 위치하는 데이터의 특징은?,부모보다 크다,부모보다 작다,부모와 같다,임의의 값이다,2,이진 트리에서 왼쪽 자식 노드는 부모 노드보다 작은 값을 가집니다.
109,4지선다,자료구조,임시제목,해시 테이블의 리사이즈가 필요할 때 임계값은 무엇을 기준으로 하나요?,Load factor,Number of keys,Key length,Hash value,1,해시 테이블의 리사이즈는 Load factor를 기준으로 결정됩니다.
110,4지선다,자료구조,임시제목,스택에서 pop 연산의 시간 복잡도는 무엇인가요?,O(n),O(log n),O(1),O(n^2),3,"스택은 LIFO 구조로, pop 연산은 O(1) 시간에 수행됩니다."
111,4지선다,자료구조,임시제목,Queue에서 enque 연산을 할 때 삽입 위치는?,Front,Middle,Rear,Random,3,Queue에서 enque는 Rear에 삽입하여 FIFO 구조를 유지합니다.
112,4지선다,자료구조,임시제목,그래프의 인접 리스트 구현 방식의 장점은 무엇인가요?,모든 간선을 빠르게 찾음,메모리 효율적,모든 정점에 동시에 접근,동적 크기 확장 불가,2,"인접 리스트 방식은 메모리를 효율적으로 사용하며, Sparse 그래프에 적합합니다."
113,4지선다,자료구조,임시제목,해시 테이블에서 Double Hashing은 어떤 방식인가요?,Separate Chaining의 한 종류,동일한 해시 함수를 두 번 사용,두 번째 해시 함수로 새로운 해시 생성,정렬된 해시 값을 생성,3,Double Hashing은 충돌 시 두 번째 해시 함수를 사용해 다른 주소로 이동합니다.
114,4지선다,자료구조,임시제목,Red-Black Tree의 균형을 유지하는 방법은 무엇인가요?,무작위 삽입,각 노드 색상 조정과 회전,노드 간선을 변경,노드를 복사하여 배치,2,Red-Black Tree는 노드의 색상 조정과 회전을 통해 균형을 유지합니다.
115,4지선다,자료구조,임시제목,이진 탐색 트리에서 왼쪽 자식 노드가 없는 경우 삭제하려면 어떻게 하나요?,트리를 재구성,부모 노드와 교체,오른쪽 자식으로 대체,노드를 null로 설정,3,"이진 탐색 트리에서 삭제할 노드의 왼쪽 자식이 없을 때, 해당 노드를 오른쪽 자식으로 대체하여 트리의 연결 구조를 유지합니다."
116,4지선다,소프트웨어공학,임시제목,싱글턴 패턴이 필요한 경우로 적절한 상황은 무엇인가요?,다수의 유저 객체를 생성하여 처리할 때,데이터베이스 연결을 관리할 때,주기적으로 생성되는 임시 파일을 관리할 때,수많은 수학 연산을 처리할 때,2,싱글턴 패턴은 데이터베이스 연결과 같은 자원을 공유하는 객체에서 유용합니다. 여러 인스턴스가 생성되면 자원 낭비 및 관리가 어려워질 수 있기 때문입니다.
117,4지선다,소프트웨어공학,임시제목,싱글턴 패턴에서 DCL(Double-Checked Locking)을 사용하는 이유는 무엇인가요?,메모리 사용을 최적화하기 위해,멀티스레드 환경에서 성능 문제를 해결하기 위해,클래스 로딩 속도를 높이기 위해,객체 생성을 여러 번 허용하기 위해,2,"DCL은 멀티스레드 환경에서 성능을 개선하면서도, 객체가 두 번 생성되지 않도록 동기화 범위를 최소화해 싱글턴 인스턴스를 안전하게 관리할 수 있도록 합니다."
118,4지선다,소프트웨어공학,임시제목,소프트웨어 개발 생명 주기(SDLC)에서 요구사항을 수집하고 분석하는 단계는 무엇인가요?,계획 단계,구현 단계,요구사항 분석 단계,유지 보수 단계,3,요구사항 분석 단계에서는 고객의 요구사항을 수집하고 분석하여 시스템에 필요한 기능과 조건을 명확히 정의합니다.
119,4지선다,소프트웨어공학,임시제목,소프트웨어 테스트 단계 중에서 최종 사용자가 시스템이 요구사항을 충족하는지 확인하는 테스트는 무엇인가요?,단위 테스트,통합 테스트,시스템 테스트,인수 테스트,4,인수 테스트는 최종 사용자가 직접 시스템을 사용해 보며 요구사항이 충족되는지를 확인하는 단계입니다.
120,4지선다,소프트웨어공학,임시제목,애자일 방법론의 특징으로 옳은 것은 무엇인가요?,긴 개발 주기와 변경 불가능한 요구사항,짧은 개발 주기와 반복적인 피드백,일회성 개발과 고객과의 협력 감소,단일 팀의 독립적 개발,2,"애자일 방법론은 반복적이고 짧은 개발 주기를 통해 유연성을 높이며, 고객과의 긴밀한 협력과 피드백을 중요시합니다."
121,4지선다,소프트웨어공학,임시제목,유지 보수 단계에서 운영 환경 변화에 맞추어 소프트웨어를 수정하는 활동은 무엇인가요?,수정 유지 보수,예방 유지 보수,적응 유지 보수,기능적 유지 보수,3,적응 유지 보수는 소프트웨어가 환경 변화에 적응할 수 있도록 수정하는 활동을 의미합니다.
122,4지선다,소프트웨어공학,임시제목,DevOps의 주요 목적은 무엇인가요?,개발과 운영 간의 효율적 협력을 통한 품질 및 배포 속도 향상,단순한 개발 속도 향상,고객과의 소통 강화,개발과 운영의 분리,1,DevOps는 개발과 운영 팀이 협력하여 소프트웨어의 품질과 배포 속도를 향상시키는 것을 목표로 합니다.
123,4지선다,소프트웨어공학,임시제목,SDLC의 설계 단계에서 수행하는 활동으로 적절한 것은 무엇인가요?,코딩 및 코드 검토,사용자 인터페이스 설계,요구사항 수집,인수 테스트 수행,2,"설계 단계에서는 사용자 인터페이스(UI)와 시스템 인터페이스 설계, 데이터베이스 설계 등이 포함되어 시스템의 구조와 상세 설계를 정의합니다."
124,4지선다,소프트웨어공학,임시제목,소프트웨어 테스트 단계 중에서 개별 모듈이 올바르게 동작하는지 확인하는 테스트는 무엇인가요?,단위 테스트,통합 테스트,시스템 테스트,인수 테스트,1,"단위 테스트는 개별 모듈이 독립적으로 올바르게 동작하는지 확인하는 테스트로, 주로 개발자가 직접 수행합니다."
125,4지선다,소프트웨어공학,임시제목,유지 보수의 종류 중에서 발견된 버그를 수정하는 활동은 무엇인가요?,적응 유지 보수,예방 유지 보수,수정 유지 보수,기능적 유지 보수,3,수정 유지 보수는 소프트웨어 배포 후 발견된 버그나 결함을 수정하는 활동입니다.
126,4지선다,소프트웨어공학,임시제목,DevOps의 특징으로 옳은 것은 무엇인가요?,배포 및 운영 속도의 저하,자동화된 지속적 통합과 배포,계획 단계의 반복,개발과 운영의 분리,2,DevOps는 소프트웨어의 배포와 운영 속도를 높이기 위해 자동화된 지속적 통합(CI)과 지속적 배포(CD) 방식을 강조합니다.
127,4지선다,소프트웨어공학,임시제목,SDLC의 구현 단계에서 사용하는 주요 활동은 무엇인가요?,요구사항 수집,코드 작성 및 코드 검토,테스트 시나리오 작성,유지 보수 계획 수립,2,"구현 단계에서는 설계 명세를 바탕으로 코드를 작성하고, 코드의 품질을 보장하기 위해 코드 검토를 수행합니다."
128,4지선다,소프트웨어공학,임시제목,클래스 다이어그램의 Generalization 관계에 해당하는 것은?,객체가 다른 객체를 생성,상위 클래스가 하위 클래스를 상속,두 객체 간 메시지 교환,메서드 오버라이딩,2,Generalization 관계는 일반적인 클래스가 특화된 클래스로 상속되는 관계를 의미합니다.
129,4지선다,소프트웨어공학,임시제목,클래스 다이어그램에서 Aggregation 관계의 특징은 무엇인가요?,대상 클래스가 메인 클래스와 함께 삭제됨,대상 클래스는 독립적으로 존재 가능,상속 관계를 나타냄,인터페이스를 구현,2,Aggregation(집합) 관계는 메인 클래스가 삭제되어도 대상 클래스는 독립적으로 존재할 수 있는 약한 결합을 의미합니다.
130,4지선다,소프트웨어공학,임시제목,시퀀스 다이어그램에서 객체 간 메시지의 이동 방향은 무엇을 나타내나요?,객체의 속성,상속 관계,시간의 흐름,인터페이스 구현,3,시퀀스 다이어그램에서는 시간의 흐름에 따라 객체 간 메시지의 이동을 나타냅니다.
131,4지선다,소프트웨어공학,임시제목,시퀀스 다이어그램에서 객체가 자기 자신에게 메시지를 보내는 것을 무엇이라고 하나요?,내부 메시지,회계 메시지,순환 메시지,반환 메시지,2,"회계 메시지는 객체가 자기 자신에게 보내는 메시지로, 내부 호출을 의미합니다."
132,4지선다,소프트웨어공학,임시제목,클래스 다이어그램에서 Composition 관계의 예로 적합한 것은?,팩토리와 애드온,캐리어와 인터셉터 유닛,고객과 주문,학생과 과제,2,"Composition 관계에서는 메인 클래스가 사라지면 대상 클래스도 함께 삭제되며, 캐리어와 인터셉터 유닛이 이에 해당합니다."
133,4지선다,소프트웨어공학,임시제목,클래스 다이어그램에서 Dependency 관계를 나타내는 기호는 무엇인가요?,실선,점선 화살표,마름모 화살표,실선 화살표,2,"Dependency(의존) 관계는 점선 화살표로 나타내어, 한 객체가 다른 객체의 변경에 의존하는 것을 표현합니다."
134,4지선다,소프트웨어공학,임시제목,"시퀀스 다이어그램에서 메시지가 동기적으로 전달될 때, 어떤 특징이 있나요?",호출한 객체가 바로 종료됨,호출받은 객체가 결과를 반환해야 종료됨,모든 객체가 비활성화됨,메시지가 순환됨,2,동기 호출에서는 호출받은 객체가 결과를 반환해야 호출한 객체의 동작이 완료됩니다.
135,4지선다,소프트웨어공학,임시제목,클래스 다이어그램에서 집합 관계를 나타내는 기호는 무엇인가요?,빈 마름모,채워진 마름모,실선 화살표,점선 화살표,1,"Aggregation(집합) 관계는 빈 마름모로 표현되며, 메인 클래스가 삭제되어도 대상 클래스는 독립적으로 존재할 수 있습니다."
136,4지선다,소프트웨어공학,임시제목,클래스 다이어그램에서 Association 관계의 예로 적절한 것은?,상속,인터페이스 구현,객체가 다른 객체를 파라미터로 받음,상속 관계 없이 다른 객체를 소유함,3,Association(연관 관계)은 객체가 다른 객체를 파라미터로 받거나 수요할 때 나타냅니다.
137,4지선다,소프트웨어공학,임시제목,Association 관계의 특징은 무엇인가요?,상속 관계를 나타냄,객체 간 약한 결합을 표현,두 객체 간 양방향 관계를 표현,특정 객체가 다른 객체를 소유하는 관계를 표현,3,Association(연관 관계)은 두 객체 간 상호 연관성을 나타내며 양방향일 수 있습니다.
138,4지선다,소프트웨어공학,임시제목,클래스 다이어그램에서 연관 관계를 나타낼 때 사용되는 기호는?,실선과 화살표,점선과 큰 화살표,실선과 직사각형,점선과 마름모,1,"연관 관계는 실선과 화살표로 표시되며, 양방향 또는 단방향 관계를 나타냅니다."
139,4지선다,소프트웨어공학,임시제목,시퀀스 다이어그램에서 액터의 역할은 무엇인가요?,메시지를 전달받기만 함,클래스의 상속 관계를 정의함,메시지 체인을 시작함,객체 생명주기를 정의함,3,"시퀀스 다이어그램에서 액터는 메시지 체인을 시작하는 요소로, 주로 사용자나 외부 시스템을 나타냅니다."
140,4지선다,소프트웨어공학,임시제목,시퀀스 다이어그램 작성 시 객체의 위치를 선정할 때 기준이 되는 것은?,객체의 데이터 크기,시간 순서와 중요도,객체의 상속 관계,객체의 인터페이스 구현 여부,2,시퀀스 다이어그램에서 객체는 시간 순서와 중요도를 기준으로 왼쪽부터 오른쪽으로 배치합니다.
141,4지선다,소프트웨어공학,임시제목,클래스 다이어그램과 시퀀스 다이어그램의 주요 차이점은 무엇인가요?,"클래스 다이어그램은 상속을, 시퀀스 다이어그램은 상호작용을 나타냄","클래스 다이어그램은 메시지를, 시퀀스 다이어그램은 객체를 나타냄",클래스 다이어그램은 시간 순서에 따라 객체를 나열,시퀀스 다이어그램은 정적 관계를 나타냄,1,"클래스 다이어그램은 객체 간 상속과 연관 관계를 표현하고, 시퀀스 다이어그램은 객체 간의 동적 상호작용을 나타냅니다."
142,4지선다,소프트웨어공학,임시제목,클래스 다이어그램이란 무엇을 나타내는 다이어그램인가요?,객체 간의 동적 상호작용,클래스와 그들 간의 정적 관계,시스템의 상태 변화,객체의 생명주기,2,"클래스 다이어그램은 클래스 간의 구조적 관계를 표현하며, 클래스와 그들 간의 정적 관계를 나타내는 다이어그램입니다."
143,4지선다,소프트웨어공학,임시제목,시퀀스 다이어그램이란 무엇을 나타내는 다이어그램인가요?,클래스와 인터페이스의 관계,객체 간의 동적 상호작용을 시간의 흐름에 따라 모델링,데이터베이스 테이블 구조,컴포넌트 간의 의존성,2,시퀀스 다이어그램은 객체 간의 동적 상호작용을 시간의 흐름에 따라 표현하는 다이어그램입니다.
144,4지선다,소프트웨어공학,임시제목,단일 책임 원칙(SRP)은 무엇을 의미하나요?,클래스는 하나의 인스턴스만 가져야 한다.,클래스는 하나의 책임만 가져야 한다.,클래스는 항상 상속을 받아야 한다.,클래스는 항상 인터페이스를 구현해야 한다.,2,"단일 책임 원칙은 클래스가 하나의 책임만을 가지도록 설계해야 함을 의미하며, 이를 통해 유지보수성과 가독성을 높입니다."
145,4지선다,소프트웨어공학,임시제목,개방-폐쇄 원칙(OCP)의 핵심 개념은 무엇인가요?,클래스는 항상 인터페이스에 의존해야 한다.,"클래스는 확장에는 열려 있고, 수정에는 닫혀 있어야 한다.",클래스는 항상 추상화되어야 한다.,클래스는 한 가지 책임만 가져야 한다.,2,개방-폐쇄 원칙은 소프트웨어의 확장성 및 안정성을 높이기 위해 확장에는 열려 있고 수정에는 닫혀 있도록 설계해야 함을 의미합니다.
146,4지선다,소프트웨어공학,임시제목,리스코프 치환 원칙(LSP)이란 무엇을 의미하나요?,모든 클래스는 하나의 부모 클래스만 가질 수 있다.,자식 클래스는 부모 클래스를 대체할 수 있어야 한다.,클래스는 항상 구체 클래스에 의존해야 한다.,모든 메서드는 하나의 작업만 수행해야 한다.,2,"리스코프 치환 원칙은 자식 클래스가 부모 클래스의 기능을 대체할 수 있도록 설계해야 함을 의미하며, 이는 코드의 안정성을 높입니다."
147,4지선다,소프트웨어공학,임시제목,인터페이스 분리 원칙(ISP)의 목적은 무엇인가요?,클라이언트는 자신이 사용하지 않는 메서드에 의존하지 않도록 해야 한다.,클래스는 단 하나의 책임만 가져야 한다.,클래스는 인터페이스 없이 독립적으로 구현되어야 한다.,모든 클래스는 하나의 인터페이스를 가져야 한다.,1,"인터페이스 분리 원칙은 클라이언트가 불필요한 메서드에 의존하지 않도록 작은 인터페이스를 여러 개 정의해, 필요 없는 의존 관계를 줄입니다."
148,4지선다,소프트웨어공학,임시제목,의존 역전 원칙(DIP)의 핵심 개념은 무엇인가요?,상위 모듈은 하위 모듈에 의존해야 한다.,"추상화된 인터페이스에 의존해야 하며, 구체화된 구현에 의존하면 안 된다.",모든 클래스는 구체화된 클래스를 상속해야 한다.,모든 메서드는 하나의 작업만 수행해야 한다.,2,의존 역전 원칙은 코드의 유연성과 테스트 용이성을 높이기 위해 구체적인 구현보다는 추상화된 인터페이스에 의존하도록 설계해야 함을 의미합니다.
149,4지선다,소프트웨어공학,임시제목,개방-폐쇄 원칙을 지키기 위해 사용할 수 있는 디자인 패턴은 무엇인가요?,Singleton 패턴,Strategy 패턴,Observer 패턴,Factory 패턴,2,Strategy 패턴은 개방-폐쇄 원칙을 지키면서 기능을 확장할 수 있게 하여 코드 수정 없이 새로운 기능을 추가하는 유연한 설계를 가능하게 합니다.
150,4지선다,소프트웨어공학,임시제목,Factory Method 패턴의 주요 목적은 무엇인가요?,객체 생성의 구체적인 클래스를 숨기기 위해,객체 간의 관계를 강화하기 위해,객체의 행위를 캡슐화하기 위해,객체의 생명 주기를 관리하기 위해,1,Factory Method 패턴은 부모 클래스에서 객체 생성을 추상화하여 자식 클래스에서 구체적인 생성 방식이 결정되도록 해줍니다. 이는 구체적인 클래스에 의존하지 않고 유연하게 객체를 생성할 수 있게 합니다.
151,4지선다,소프트웨어공학,임시제목,Builder 패턴의 사용 목적은 무엇인가요?,클래스의 상속 구조를 단순화하기 위해,객체의 복잡한 생성 과정을 분리하여 단계별로 설정할 수 있도록 하기 위해,객체의 관계를 느슨하게 만들기 위해,객체의 생성 속도를 높이기 위해,2,Builder 패턴은 복잡한 객체를 생성하는 과정에서 각 단계를 독립적으로 처리할 수 있게 합니다. 동일한 생성 과정을 통해 다양한 표현을 만들 수 있도록 설계됩니다.
152,4지선다,소프트웨어공학,임시제목,Observer 패턴은 어떤 경우에 유용하게 사용될까요?,특정 객체의 상태 변화가 다른 객체에 영향을 미칠 때,객체 생성을 서브 클래스에서 결정할 때,다양한 알고리즘을 쉽게 교체할 때,객체의 특정 기능을 확장할 때,1,Observer 패턴은 한 객체의 상태 변화가 다른 객체에 실시간으로 반영되도록 설계하는 패턴입니다. 주로 이벤트 기반의 알림 시스템이나 데이터 연동이 필요한 경우에 활용됩니다.
153,4지선다,소프트웨어공학,임시제목,Composite 패턴의 주요 특징은 무엇인가요?,객체를 계층 구조로 구성하여 단일 객체와 복합 객체를 동일하게 다루기 위해,객체의 생성을 제한하고 단일 인스턴스만 제공하기 위해,객체의 상태 변화에 따라 다른 객체에 자동으로 알리기 위해,객체의 구체적인 클래스에 대한 의존성을 제거하기 위해,1,Composite 패턴은 객체를 트리 구조로 구성하여 단일 객체와 복합 객체를 동일하게 다룰 수 있도록 해줍니다. 이를 통해 클라이언트는 단일 객체와 복합 객체에 대해 동일한 방식으로 작업할 수 있습니다.
154,4지선다,프로그래밍,임시제목,객체지향 프로그래밍의 주요 특징 중 캡슐화(Encapsulation)의 목적은 무엇인가요?,코드 중복을 줄이기 위해,데이터와 메서드를 하나의 단위로 묶어 외부에서 접근을 제어하기 위해,객체 간 상속 관계를 명확히 하기 위해,상속을 통해 코드 재사용성을 높이기 위해,2,"캡슐화는 객체의 데이터와 해당 데이터를 조작하는 메서드를 하나의 단위로 묶고, 외부에서 접근할 수 있는 범위를 제어하여 데이터의 무결성을 보호하는 역할을 합니다."
155,4지선다,프로그래밍,임시제목,상속(Inheritance)의 주요 이점은 무엇인가요?,객체의 속성을 숨기기 위해,코드를 모듈화하기 위해,코드의 재사용성과 계층 구조를 통해 객체 간 관계를 명확히 하기 위해,다양한 인터페이스를 구현하기 위해,3,"상속은 기존 클래스의 기능을 재사용하여 새로운 클래스를 생성할 수 있게 합니다. 이를 통해 코드의 재사용성을 높이고, 계층 구조를 통해 객체 간의 관계를 명확히 정의할 수 있습니다."
156,4지선다,프로그래밍,임시제목,다형성(Polymorphism)의 특징으로 올바른 설명은 무엇인가요?,동일한 메서드 이름을 가진 메서드를 하나만 정의하는 것,"하나의 객체가 여러 형태로 해석되며, 동일한 인터페이스로 서로 다른 객체를 다룰 수 있게 하는 것",객체의 생성을 제한하여 단일 인스턴스만 사용하도록 하는 것,메서드의 반환값을 다르게 정의하는 것,2,"다형성은 하나의 인터페이스로 서로 다른 객체를 동일하게 다룰 수 있게 해주며, 동일한 메시지에 대해 객체별로 다른 반응을 할 수 있도록 합니다. 이는 코드의 유연성과 확장성을 높이는 중요한 객체지향 개념입니다."
157,4지선다,프로그래밍,임시제목,추상화(Abstraction)의 개념에 대해 올바르게 설명한 것은 무엇인가요?,객체의 내부 데이터를 숨기는 방식,객체 간 관계를 상속을 통해 정의하는 것,중요한 속성과 행동을 정의하여 객체의 복잡성을 줄이고 필요한 부분만 노출하는 것,객체를 여러 개 생성하지 않도록 제약하는 것,3,"추상화는 복잡한 시스템에서 꼭 필요한 속성과 행동만을 정의하여, 불필요한 세부 사항은 숨기고 중요한 부분만 노출하여 객체의 복잡성을 줄이는 역할을 합니다."
158,OX,운영체제,임시제목,CPU 작업 시간을 여러 프로그램들이 조금씩 나누어 쓰는 시스템을 시분할 시스템(time sharing system)이라고 한다.,O,X,,,1,"시분할 시스템은 CPU 시간을 여러 사용자 또는 프로그램이 조금씩 나누어 사용하는 방식으로, 각 작업이 빠르게 번갈아 가며 CPU를 사용하는 방식입니다."
159,OX,운영체제,임시제목,CPU와 달리 메모리의 경우 여러 프로그램들이 조금씩 메모리 공간을 보유하며 동시에 메모리에 올라갈 수 없다.,O,X,,,2,메모리도 분할을 통해 여러 프로그램이 동시에 일부 메모리 공간을 할당받고 함께 메모리에 올라갈 수 있습니다. 다중 프로그래밍이 이를 가능하게 합니다.
160,OX,운영체제,임시제목,다중처리기 시스템(multi-processor system)은 하나의 컴퓨터 안에 CPU가 여러 개 설치된 경우를 뜻한다.,O,X,,,1,"다중처리기 시스템은 하나의 컴퓨터에 여러 CPU가 설치된 경우로, 이를 통해 여러 작업을 병렬로 처리할 수 있습니다."
161,OX,운영체제,임시제목,입출력 장치는 CPU나 메모리와 달리 인터럽트라는 메커니즘을 통해 관리가 이루어진다.,O,X,,,1,입출력 장치는 인터럽트 메커니즘을 통해 CPU와의 비동기 처리를 지원합니다. 이는 입출력 작업이 완료되면 CPU에 알려주는 방식입니다.
162,OX,운영체제,임시제목,운영체제는 인터럽트의 종류마다 서로 다른 인터럽트 처리 루틴을 가지고 있다.,O,X,,,1,"운영체제는 각 인터럽트의 종류에 맞는 별도의 처리 루틴을 정의하여, 상황에 맞게 적절한 처리를 할 수 있도록 합니다."
163,OX,운영체제,임시제목,다수의 프로그램이 동시에 주기억 장치에 있도록 한 방식을 다중 프로그래밍(multi-programming) 시스템이라고 부른다.,O,X,,,1,다중 프로그래밍 시스템은 여러 프로그램이 동시에 메모리에 존재하며 CPU를 번갈아 사용하는 방식입니다.
164,OX,운영체제,임시제목,다수의 프로세서를 장착하여 동시에 여러 작업을 병렬로 실행하여 처리 속도를 최대한 높이는 방식을 다중처리(multi-processing) 시스템이라고 부른다.,O,X,,,1,다중처리 시스템은 여러 프로세서를 통해 병렬 처리가 가능하여 전체 처리 속도가 향상됩니다.
165,OX,운영체제,임시제목,Multiprocessing은 Multiprogramming을 전제해야 한다.,O,X,,,2,"Multiprocessing은 반드시 Multiprogramming을 전제하지 않으며, 단일 프로그램의 작업을 병렬로 처리할 수도 있습니다."
166,OX,운영체제,임시제목,시분할 시스템이 효과적으로 운영되기 위해 다중 프로그래밍 시스템이 필요하지 않다.,O,X,,,2,시분할 시스템에서는 여러 프로그램이 동시에 실행되어야 하므로 다중 프로그래밍 시스템이 필요합니다.
167,OX,운영체제,임시제목,커널(Kernel)은 운영체제의 각종 기능들 중 사용자와 실행 프로그램을 위해 매우 빈번하게 사용되는 부분이기 때문에 메모리 상주 프로그램이라 불리기도 한다.,O,X,,,1,커널은 운영체제의 핵심 기능을 수행하며 항상 메모리에 상주하여 시스템 자원을 관리합니다.
168,OX,운영체제,임시제목,CPU의 캐시 메모리는 CPU와 메모리 간 데이터 접근 시 속도 차이를 좁히기 위해 사용한다.,O,X,,,1,캐시 메모리는 CPU와 메모리 간 데이터 접근 속도 차이를 줄이기 위해 사용됩니다. CPU가 자주 사용하는 데이터를 빠르게 접근하기 위해 캐시 메모리에 저장합니다.
169,OX,운영체제,임시제목,CPU는 캐시 적중률을 높이기 위해 지역성을 기반으로 캐시 메모리에 어떤 데이터를 저장할지 결정한다.,O,X,,,1,"CPU는 시간 및 공간 지역성 원리를 활용하여 자주 사용하는 데이터를 캐시에 저장함으로써 캐시 적중률을 높입니다. 시간 지역성은 최근에 사용한 데이터가 다시 참조될 가능성이 높은 경우를, 공간 지역성은 근처 주소의 데이터가 참조될 가능성이 높은 경우를 의미합니다."
170,OX,운영체제,임시제목,캐시 적중률은 CPU에서 요청한 데이터가 캐시에 존재할 때 높아진다.,O,X,,,1,"캐시 적중률은 CPU 요청 데이터가 캐시에 있을 때 높아집니다. 캐시 히트가 발생하면 CPU는 캐시에서 데이터를 빠르게 가져올 수 있으며, 캐시 적중률은 캐시 히트 수 / 전체 메모리 접근 횟수로 계산됩니다."
171,OX,운영체제,임시제목,프로그램은 하나이지만 프로세스는 여러 개일 수 있다.,O,X,,,1,"프로그램은 디스크에 저장된 실행 가능한 코드의 집합이며, 프로세스는 실행 중인 프로그램을 의미합니다. 따라서 하나의 프로그램으로부터 여러 개의 프로세스가 생성될 수 있습니다. 예를 들어, 웹 브라우저 프로그램에서 여러 개의 창(프로세스)을 열 수 있습니다."
172,OX,운영체제,임시제목,"스레드는 프로세스 내에서 작업을 처리하는 실행 단위로, 둘 이상의 스레드가 동시에 각각의 작업을 처리하는 방식을 멀티스레드라고 하며, 여러 개의 프로세스가 같은 프로그램을 동시에 병렬처리하는 방식을 멀티 프로세스라고 한다.",O,X,,,1,"스레드는 프로세스 내에서 실행되는 실행 단위로, 멀티스레딩은 하나의 프로세스 내에서 여러 스레드가 동시에 작업을 수행하는 것을 의미합니다. 멀티 프로세스는 여러 개의 프로세스가 동시에 실행되는 것을 말하며, 이는 독립된 메모리 공간에서 실행됩니다."
173,OX,운영체제,임시제목,"하나의 프로세스에 여러 개의 스레드가 있다면 각 스레드는 프로세스의 힙 영역만 따로 할당받고 코드 영역, 데이터 영역, 스택 영역은 서로 공유한다.",O,X,,,2,"하나의 프로세스 내의 스레드들은 코드 영역, 데이터 영역, 힙 영역을 공유합니다. 그러나 각 스레드는 독립적인 스택 영역을 가집니다. 이는 스레드가 함수 호출 시 전달되는 매개변수, 반환 주소 및 지역 변수 등을 저장하는 데 사용되기 때문입니다."
174,OX,운영체제,임시제목,경쟁 조건 문제가 발생할 수 있는 코드상의 특정 부분인 임계 영역에서 경쟁 조건 문제가 발생하지 않기 위한 조건 중 상호 배제는 하나의 프로세스가 임계 영역에서 실행 중일 때는 다른 프로세스가 임계 영역에 들어갈 수 없다는 것이다.,O,X,,,1,"상호 배제(Mutual Exclusion)는 임계 영역 문제를 해결하기 위한 기본 원칙 중 하나입니다. 이는 한 시점에 하나의 프로세스(또는 스레드)만이 임계 영역에 진입할 수 있도록 하여, 데이터의 일관성과 동기화 문제를 방지합니다."
175,OX,운영체제,임시제목,"데몬 스레드는 백그라운드에서 실행되는 스레드로, 다른 모든 일반 스레드가 종료되면 자동으로 종료된다. 주로 보조적인 작업을 수행하며, 예를 들어 가비지 컬렉션 등을 처리하는 데 사용된다.",O,X,,,1,"데몬 스레드는 애플리케이션의 서비스를 제공하기 위해 백그라운드에서 실행되는 스레드입니다. 이는 애플리케이션의 나머지 부분이 종료될 때 자동으로 종료되며, 가비지 컬렉션, 화면 자동 갱신 등의 보조적인 역할을 수행합니다."
176,OX,운영체제,임시제목,CPU 스케줄링 방식 중 선점형 방식은 어떤 프로세스가 CPU를 계속 사용하길 원하더라도 다른 프로세스가 강제로 빼앗을 수 있는 스케줄링 방법이다.,O,X,,,1,"CPU 스케줄링 방식에는 비선점형 방식과 선점형 방식이 있습니다. 비선점형 방식은 CPU를 획득한 프로세스가 스스로 CPU를 반납하기 전까지는 CPU를 빼앗기지 않는 방식이고, 선점형 방식은 다른 프로세스가 강제로 CPU를 빼앗아 사용할 수 있는 방식입니다. CPU를 빼앗는 방법으로는 타이머 인터럽트를 사용하는 방식이 대표적입니다."
177,OX,운영체제,임시제목,타이머 인터럽트가 빈번히 발생할수록 각 프로세스의 응답시간이 향상된다.,O,X,,,1,타이머 인터럽트가 자주 발생하면 각 프로세스가 CPU를 사용할 수 있는 시간이 짧아져 응답 시간이 향상됩니다. 응답 시간이란 프로세스가 준비 큐에 들어온 후 첫 번째 CPU를 획득하기까지 걸린 시간을 말합니다. 타이머 인터럽트가 너무 빈번하면 오버헤드가 증가할 수 있으므로 적절한 빈도 유지가 중요합니다.
178,OX,운영체제,임시제목,"FCFS 스케줄링은 선점형 방식으로, 콘보이 현상이 발생할 수 있다.",O,X,,,2,"FCFS 스케줄링은 도착한 순서대로 CPU를 할당하는 비선점형 방식입니다. 콘보이 현상은 짧은 CPU 버스트의 프로세스가 긴 버스트의 프로세스 때문에 대기하는 현상으로, FCFS의 단점 중 하나입니다."
179,OX,운영체제,임시제목,최단작업 우선 스케줄링 알고리즘(Shortest-Job First: SJF)은 비선점형 방식과 선점형 방식 두 가지로 구현될 수 있다.,O,X,,,1,"SJF 스케줄링은 비선점형과 선점형 두 가지로 구현될 수 있습니다. 비선점형은 CPU를 자진 반납하기 전까지 CPU를 빼앗지 않는 방식이고, 선점형(SRTF)은 더 짧은 CPU 버스트를 가진 프로세스가 도착하면 CPU를 교체하는 방식입니다."
180,OX,운영체제,임시제목,SJF 스케줄링 알고리즘은 평균 대기시간을 최소화하는 최적 알고리즘이므로 항상 좋은 방식이라고 할 수 있다.,O,X,,,2,"SJF 스케줄링은 평균 대기 시간을 최소화하지만, CPU 버스트가 긴 프로세스가 무한정 기다리게 될 위험이 있어 항상 좋은 방식은 아닙니다."
181,OX,네트워크,임시제목,OSI 7계층 모델은 네트워킹 프로토콜의 구현과 관련이 없다.,O,X,,,2,"OSI 7계층 모델은 네트워크 프로토콜과 네트워크 인터페이스 간의 통신을 표준화하는 데 사용되며, 다양한 네트워킹 프로토콜의 구현 가이드 역할을 합니다. 그러나 특정 프로토콜의 구현과 직접 관련이 있는 것은 아닙니다."
182,OX,네트워크,임시제목,"TCP는 비연결 지향적이며, UDP는 연결 지향적이다.",O,X,,,2,"TCP는 연결 지향적 프로토콜로, 데이터 전송 전 연결을 설정하고, 전송 중에도 오류 제어와 흐름 제어를 제공합니다. UDP는 비연결 지향적이며, 데이터그램을 단순히 송수신하고 신뢰성 있는 전송을 보장하지 않습니다."
183,OX,네트워크,임시제목,"패킷은 데이터 전송 시에만 사용되며, 수신 시에는 사용되지 않는다.",O,X,,,2,"패킷은 네트워크를 통해 데이터를 송신하고 수신하는 데 모두 사용됩니다. 전송 과정에서는 송신 장치에서 생성되고, 수신 과정에서는 수신 장치에서 데이터를 재조립하는 데 사용됩니다."
184,OX,네트워크,임시제목,모든 IP 주소는 고유하다.,O,X,,,1,"모든 IP 주소는 고유하게 부여되어야 합니다. 각 장치는 고유한 IP 주소를 통해 네트워크에서 식별되며, 이는 네트워크 상에서의 주소 충돌을 방지합니다."
185,OX,네트워크,임시제목,MAC 주소는 네트워크 상의 장비를 식별하는 데 사용된다.,O,X,,,1,"MAC 주소는 네트워크에 연결된 각 장비에 부여되는 고유한 하드웨어 식별자입니다. 네트워크 상의 장비를 식별하는 데 사용되며, 일반적으로 네트워크 인터페이스 카드에 할당됩니다."
186,OX,네트워크,임시제목,TCP 연결 설정에는 3-way handshake 과정이 필요하다.,O,X,,,1,"TCP는 신뢰성 있는 데이터 전송을 위해 연결 지향적 프로토콜을 사용하며, 3-way handshake 과정을 통해 연결을 설정합니다. 클라이언트와 서버가 SYN, SYN-ACK, ACK 패킷을 주고받아 안정적인 양방향 통신을 확보합니다."
187,OX,네트워크,임시제목,HTTPS 통신에서는 TLS가 SSL을 완전히 대체하였다.,O,X,,,1,"TLS(Transport Layer Security)는 SSL의 후속 버전으로 개발되어, 대부분의 웹 브라우저와 서버에서 SSL을 대체했습니다. TLS는 SSL보다 강화된 보안 기능을 제공하며, 현재 HTTPS 통신에서 SSL 대신 사용됩니다."
188,OX,네트워크,임시제목,SSL/TLS 암호화는 데이터를 전송하는 동안만 정보를 보호한다.,O,X,,,1,"SSL/TLS는 데이터를 전송하는 동안만 암호화하여 보호합니다. 데이터가 전송되는 동안 안전하게 보호되지만, 목적지에 도달한 후의 데이터 보안은 서버의 보안 정책에 따라 관리됩니다."
189,OX,네트워크,임시제목,DNS 쿼리는 기본적으로 UDP 프로토콜을 사용한다.,O,X,,,1,"DNS 쿼리는 기본적으로 빠른 속도를 위해 UDP 프로토콜을 사용합니다. 단, 쿼리나 응답이 큰 경우, 또는 보안이 중요한 경우에는 TCP를 사용할 수도 있습니다."
190,OX,네트워크,임시제목,IP 주소의 클래스 B는 127.0.0.0부터 시작한다.,O,X,,,2,"IP 주소 클래스 B의 범위는 128.0.0.0부터 시작하며, 127.0.0.0은 루프백 주소로 예약되어 있습니다. 루프백 주소는 외부 네트워크와 상관없이 자체 테스트 용도로 사용됩니다."
191,OX,네트워크,임시제목,TCP/IP 모델에서 응용 계층은 직접 하드웨어와 통신한다.,O,X,,,2,"TCP/IP 모델의 응용 계층은 사용자의 애플리케이션과 상호 작용하는 계층으로, 직접 하드웨어와 통신하지 않습니다. 하드웨어와의 직접 통신은 물리 계층과 데이터 링크 계층에서 이루어집니다."
192,OX,네트워크,임시제목,SSH 접속 시 사용하는 RSA 키는 데이터 전송 양방향 모두 같은 키를 사용한다.,O,X,,,2,"SSH는 초기 연결 설정 시에는 RSA와 같은 비대칭키를 사용하지만, 이후의 데이터 전송에는 세션 키 교환을 통해 대칭키 암호화를 사용하여 속도를 높입니다. 비대칭키는 공개/비공개 키가 다르기 때문에 양방향에서 같은 키를 사용하지 않습니다."
193,OX,네트워크,임시제목,서버에 로드 밸런서를 구현하지 않으면 DoS/DDoS 공격에 더 취약하다.,O,X,,,1,"로드 밸런서는 서버에 도달하는 트래픽을 분산하여 단일 서버에 과부하가 발생하는 것을 방지하며, DoS/DDoS 공격에 대한 방어력을 높여줍니다. 로드 밸런서 없이 서버가 운영되면 공격에 의해 과부하가 발생할 가능성이 커집니다."
194,OX,네트워크,임시제목,API 엔드포인트에 속도 제한을 설정하지 않으면 DoS 공격을 쉽게 받을 수 있다.,O,X,,,1,API 엔드포인트에 속도 제한(Rate Limiting)이 없으면 대량의 요청이 짧은 시간에 발생할 경우 서버 자원이 고갈되며 DoS 공격에 취약해집니다. 속도 제한은 서비스의 안정성과 가용성을 보장하는 중요한 보안 설정입니다.
195,OX,네트워크,임시제목,"네트워크 통신에서, 전송 시작 시 생성된 데이터 패킷의 해시 값과 수신 완료 후 계산된 해시 값이 일치하면, 데이터의 무결성이 항상 보장된다.",O,X,,,2,"데이터 패킷의 해시 값이 일치한다고 해서 데이터 무결성이 항상 보장되지는 않습니다. 중간자 공격(MITM)처럼 해시 값을 조작할 수 있는 경우, 해시 값은 일치하더라도 데이터가 변경될 수 있습니다. 안전한 전송을 위해서는 SSL/TLS와 같은 보안 프로토콜이 필요합니다."
196,OX,네트워크,임시제목,API 게이트웨이를 사용하면 내부 네트워크 트래픽을 패킷 스니핑 공격으로부터 일정 수준 보호할 수 있다.,O,X,,,1,"API 게이트웨이는 SSL/TLS 암호화와 요청 검증 등을 통해 네트워크 트래픽을 보호하며, 외부로부터의 패킷 스니핑 공격을 방어하는 데 일정 수준 도움이 됩니다. 하지만 내부 네트워크에서 발생하는 공격까지 완벽하게 방어하지는 못하므로 추가적인 보안 조치가 필요합니다."
197,OX,네트워크,임시제목,민감한 정보를 전송할 때는 HTTP GET 요청보다 POST 요청을 사용하는 것이 더 안전하다.,O,X,,,1,"HTTP GET 요청은 데이터를 URL에 포함시켜 전송하므로 브라우저 히스토리나 서버 로그에 기록되며 노출 위험이 높습니다. POST 요청은 데이터를 HTTP 메시지 바디에 포함하여 전송해 URL에 나타나지 않으므로, 특히 민감한 정보 전송 시 더 안전합니다."
198,OX,네트워크,임시제목,"HTTP 프로토콜은 Stateful이므로, 웹 애플리케이션의 세션 관리에 별도의 메커니즘을 요구한다.",O,X,,,2,"HTTP는 Stateless 프로토콜이므로, 요청 간 상태를 기억하지 않습니다. 웹 애플리케이션에서 세션 관리가 필요한 경우, 쿠키나 세션 토큰 같은 별도 메커니즘이 필요합니다. Stateful 프로토콜과는 달리 HTTP는 이전 요청 상태를 유지하지 않으므로, 이 명제는 거짓입니다."
199,OX,네트워크,임시제목,"A 레코드는 도메인의 IP 주소를 직접 지정하는 반면, CNAME 레코드는 한 도메인을 다른 도메인에 매핑하고, TXT 레코드는 도메인의 메타데이터를 제공하는데 사용되어, 백엔드 서버의 SSL/TLS 구성과 이메일 서버 인증에 모두 필수적이다.",O,X,,,2,"A 레코드는 도메인 이름을 특정 IP 주소로 매핑하는 데 사용되어 웹 서버의 실제 위치를 가리킵니다. CNAME 레코드는 도메인 간의 별칭을 생성하지만 SSL/TLS 설정에 필수적이지 않으며, TXT 레코드는 SPF와 DKIM 설정을 통해 이메일 인증을 지원합니다. 이로 인해 SSL/TLS와 이메일 인증 모두에 세 레코드가 필수적이라는 설명은 틀립니다."
200,OX,네트워크,임시제목,"쿠키는 웹 서버에 저장되며 사용자 인증 정보를 오래 보관할 수 있지만, 세션은 클라이언트 PC에 저장되어 브라우저 종료 시 바로 삭제된다.",O,X,,,2,"쿠키는 사용자의 클라이언트 PC에 저장되며 설정된 만료 기간 동안 유지됩니다. 세션 데이터는 웹 서버에 저장되고, 클라이언트에는 세션을 식별하는 ID만 남습니다. 세션은 일반적으로 브라우저가 종료되면 만료되지만 서버 설정에 따라 조정 가능합니다. 따라서 쿠키는 클라이언트에, 세션은 서버에 저장됩니다."
201,OX,네트워크,임시제목,"프록시 서버는 클라이언트의 요청을 받아 처리할 때, 서버로부터 받은 모든 응답을 캐시하여 네트워크 성능을 향상시킨다.",O,X,,,2,"프록시 서버는 클라이언트의 요청에 대한 응답을 캐싱하여 네트워크 성능을 향상시키는 역할을 수행할 수 있지만, 모든 응답을 캐시하지는 않습니다. 캐싱 여부는 응답의 Cache-Control 헤더 설정에 따라 달라지며, 특히 no-store로 설정된 경우에는 캐싱이 이루어지지 않습니다. 따라서 ""모든 응답을 캐시한다""는 표현은 부정확합니다."
202,OX,네트워크,임시제목,"리버스 프록시는 외부 클라이언트의 요청을 받아 내부 서버로 전달하며, 여러 서버의 로드 밸런싱을 통해 네트워크 트래픽을 관리하고, SSL 암호화를 처리하는 역할을 수행한다.",O,X,,,1,"리버스 프록시는 외부에서 오는 요청을 내부 네트워크의 서버로 전달하며, 특히 로드 밸런싱을 통해 서버 간 부하를 분산시킵니다. 또한, SSL/TLS 암호화를 중앙에서 처리해 백엔드 서버의 부담을 줄이고 보안을 강화하는 역할을 수행합니다. 이 과정은 고성능과 보안을 유지하기 위한 중요한 기능입니다."
203,OX,데이터베이스,임시제목,성능 튜닝은 데이터베이스의 쿼리를 단순히 재작성함으로써 해결할 수 있다.,O,X,,,1,"성능 튜닝은 쿼리 재작성, 인덱스 최적화 등으로 데이터베이스 성능을 개선할 수 있습니다. 쿼리 실행 시간은 모니터링 도구와 EXPLAIN PLAN 등을 통해 분석하여 문제를 파악할 수 있으며, 이를 통해 성능을 튜닝할 수 있습니다."
204,OX,데이터베이스,임시제목,쿼리 실행 속도를 느리게 만드는 요소는 주로 데이터베이스 용량이다.,O,X,,,2,"쿼리 실행 속도를 느리게 하는 주된 원인은 쿼리의 복잡성, 인덱스 부재, 최적화 부족 등입니다. 데이터베이스 용량은 직접적인 성능 저하 원인이 아니지만, 대규모 데이터 집합에서는 전체 테이블 스캔이 늘어나면서 성능 저하가 발생할 수 있습니다. 이를 해결하려면 VACUUM, 데이터 아카이빙, 조건 제한 등을 고려해야 합니다."
205,OX,데이터베이스,임시제목,성능 문제를 해결하기 위해 많은 컬럼에 인덱스를 추가하는 것이 권장된다.,O,X,,,2,"많은 컬럼에 인덱스를 추가하면 성능이 저하될 수 있습니다. 인덱스가 늘어날수록 데이터 삽입, 갱신, 삭제 작업의 속도가 느려지며, 인덱스를 유지하는 데 추가적인 자원이 소모되기 때문입니다."
206,OX,데이터베이스,임시제목,쿼리가 데이터베이스 내의 많은 행을 검색할 때 성능이 저하될 수 있다.,O,X,,,1,대량의 데이터를 검색할 때는 인덱스를 적절히 활용하지 못하면 테이블 전체 스캔이 발생하여 성능이 저하될 수 있습니다. 이러한 경우 인덱스와 적절한 쿼리 구조를 통해 검색 성능을 개선할 수 있습니다.
207,OX,데이터베이스,임시제목,데이터베이스의 인덱스를 자주 수정하는 것은 성능에 부정적인 영향을 줄 수 있다.,O,X,,,1,"인덱스를 자주 수정하면 인덱스 구조가 변경되고, 그로 인해 성능에 부정적인 영향을 미칠 수 있습니다. 인덱스 재구성 작업으로 인해 오버헤드가 발생할 수 있으므로, 불필요한 인덱스 수정을 피하고 주기적으로 VACUUM과 REINDEX 작업을 통해 성능을 유지하는 것이 좋습니다."
208,OX,데이터베이스,임시제목,분산 데이터베이스는 여러 지역에 중복하여 분산 저장함으로써 가용성을 높일 수 있다는 특징이 있다. 또한 지역별 사이트들도 자치성(autonomy)을 가지고 독립적 동작이 가능하며 사용자들이 원하는 데이터가 어느 지역에 저장되어 있는지 알 수 있다는 특징이 있다.,O,X,,,2,"분산 데이터베이스에서는 사용자가 데이터의 위치를 알 필요가 없으며, 여러 지역에 데이터를 분산 저장하여 가용성을 높입니다. 지역 사이트들은 독립적으로 동작할 수 있지만, 데이터가 어디에 저장되어 있는지에 대한 정보는 사용자에게 노출되지 않습니다."
209,OX,데이터베이스,임시제목,피보팅(pivoting)은 교차 테이블(cross-tab)에서 데이터를 분석하는 차원을 다양하게 변경하는 것이 가능하다.,O,X,,,1,"피보팅(pivoting)은 OLAP(Online Analytical Processing) 기능 중 하나로, 데이터의 분석 차원을 다양하게 변경하여 여러 각도로 데이터를 분석할 수 있도록 합니다."
210,OX,데이터베이스,임시제목,"집계 연산에 대해 사용자가 원하는 크기의 데이터로 보여주기 위해, 미세한 단위부터 큰 단위로 변화시키는 연산을 롤업(roll-up)이라고 한다.",O,X,,,1,"롤업(roll-up)은 집계 단위를 상위 수준으로 변경하는 연산으로, 세부 데이터를 요약해 보여줍니다. 반대로, 드릴다운(drill-down)은 하위 수준으로 세부 데이터를 보여주는 연산입니다."
211,OX,데이터베이스,임시제목,"조회하려는 속성이 물리적으로 정렬되어 있지 않은 경우, 클러스팅 인덱스가 효율적이다.",O,X,,,2,클러스팅 인덱스는 데이터가 물리적으로 정렬되어 있을 때 유용한 인덱스 방식입니다. 데이터가 정렬되어 있지 않은 경우에는 클러스터 인덱스가 효율적이지 않습니다.
212,OX,데이터베이스,임시제목,지연 갱신 회복기법에서는 UNDO 연산이 필요 없다.,O,X,,,1,"지연 갱신 회복 기법(Deferred update)은 No-Undo / Redo 알고리즘을 사용하여, UNDO 연산 없이 Redo 연산만으로 회복이 가능합니다."
213,OX,데이터베이스,임시제목,DBMS에 옵티마이저 Extension을 추가하면 구조화된 SQL의 결과로 필요한 처리경로를 자동으로 생성해준다.,O,X,,,2,"DBMS에 내장된 옵티마이저는 기본적으로 제공되는 기능이며, 별도의 Extension으로 설치할 수 있는 옵션이 아닙니다. 옵티마이저는 SQL 쿼리를 처리할 최적의 경로를 자동으로 생성해주는 기능을 내포하고 있습니다."
214,OX,데이터베이스,임시제목,규칙기반 옵티마이저를 통해 쿼리를 실행하는데 소요되는 시간을 예측할 수 있다.,O,X,,,2,규칙기반 옵티마이저(RBO)는 정해진 규칙에 따라 쿼리를 처리하는 방식이므로 쿼리의 비용(Cost)이나 소요 시간을 정확히 예측할 수 없습니다. 비용 예측을 위해서는 비용기반 옵티마이저(CBO)가 필요합니다.
215,OX,데이터베이스,임시제목,"옵티마이저 비용 모델에는 I/O 비용 모델, CPU 비용 모델, memory 비용 모델이 존재한다.",O,X,,,2,"옵티마이저 비용 모델에는 I/O 비용 모델과 CPU 비용 모델 두 가지가 존재합니다. 메모리 비용 모델은 존재하지 않으며, 주로 디스크 I/O와 CPU 사용량이 주요 비용 요소로 계산됩니다."
216,OX,데이터베이스,임시제목,"옵티마이저 통계 유형으로 아래 3가지가 존재한다: 테이블 통계 (전체 레코드 수, 총 블록 수, 빈 블록 수, 한 행당 평균 크기 등), 인덱스 통계 (인덱스 높이, 리프 블록수, 클러스터링 팩터, 인덱스 레코드 수 등), 컬럼 통계 (값의 수, 최저 값, 최고 값, 밀도, null 개수, 컬럼 히스토리 등).",O,X,,,2,"옵티마이저 통계 유형에는 시스템 통계가 추가로 포함되어 있으며, 시스템 통계는 I/O 성능, CPU 성능과 같은 정보를 담고 있어 옵티마이저가 계획을 수립하는 데 참고됩니다. 테이블, 인덱스, 컬럼 외에 시스템 통계가 포함되므로 위 설명은 부정확합니다."
217,OX,데이터베이스,임시제목,작성된 SQL은 옵티마이저로 인해 최우선순위가 되어 쿼리가 실행된다.,O,X,,,2,"SQL에서 옵티마이저가 중요하긴 하지만, 옵티마이저 힌트가 우선순위가 더 높습니다. 사용자가 제공하는 테이블 힌트, 조인 힌트, 쿼리 힌트 등은 옵티마이저보다 우선순위가 되어 실행에 영향을 줍니다."
218,OX,데이터베이스,임시제목,Hash Join은 조인 칼럼의 인덱스를 사용하지 않는다.,O,X,,,1,"Hash Join은 조인 칼럼의 인덱스를 사용하지 않고, 조인 컬럼의 해시 테이블을 생성하여 사용합니다. 해시 테이블을 통해 빠르게 일치하는 데이터를 찾는 방식으로, 주로 큰 테이블 간의 조인에서 성능을 발휘합니다."
219,OX,데이터베이스,임시제목,Sort Merge Join은 조인 칼럼을 기준으로 데이터를 정렬하여 조인을 수행한다.,O,X,,,1,"Sort Merge Join은 조인할 두 테이블을 조인 칼럼을 기준으로 정렬한 후, 정렬된 순서대로 조인을 수행하는 방식입니다. 조인 시 정렬된 데이터로 인해 비교 작업이 빠르며, 특히 큰 데이터셋에서 효과적입니다."
220,OX,데이터베이스,임시제목,NL Join(Nested Loop Join)은 외부 테이블의 각 행에 대해 내부 테이블을 한 번만 스캔한다.,O,X,,,2,"NL Join은 외부 테이블의 각 행에 대해 내부 테이블을 여러 번 스캔하면서 일치하는 데이터를 찾습니다. 즉, 외부 테이블의 각 행마다 내부 테이블 전체를 반복적으로 스캔하게 되므로, 내부 테이블에 대한 반복 접근이 필요합니다."
221,OX,데이터베이스,임시제목,"NL Join(Nested Loop Join)은 처리량이 많을 때 성능상 이점이 있으며, 정렬에 따른 부담이 있다.",O,X,,,2,"NL Join은 처리량이 적을 때 성능상 이점이 있으며, 정렬에 따른 부담은 없습니다. 대신, 데이터 양이 많아지면 성능이 저하될 수 있고, 정렬 작업이 필요하지 않기 때문에 단순 반복을 통해 조인을 수행합니다."
222,OX,데이터베이스,임시제목,Horizontal Partitioning은 Column을 기준으로 Table을 나누는 방식이다.,O,X,,,2,"Horizontal Partitioning은 Row(행)를 기준으로 테이블을 나누는 방식입니다. 반면, Column(열)을 기준으로 나누는 방식은 Vertical Partitioning입니다."
223,OX,데이터베이스,임시제목,정규화한 DB는 Vertical Partitioning을 했다고 할 수 있다.,O,X,,,1,"정규화는 데이터 중복을 줄이기 위해 컬럼을 세분화하여 테이블을 분리하는 과정이므로, 이를 Column 기준의 분리 방식인 Vertical Partitioning과 유사하게 볼 수 있습니다."
224,OX,데이터베이스,임시제목,"DB Sharding은 특정 테이블의 Tuple을 분리하여 여러 테이블로 나누는 방식이며, 이때 하나의 서버를 기준으로 테이블을 분리한다.",O,X,,,2,"DB Sharding은 데이터베이스를 여러 서버에 걸쳐 분산하는 방식으로, Row(행)를 기준으로 테이블을 나누고 여러 서버에 분배합니다. 이는 하나의 서버가 아닌 여러 서버에서 데이터를 분산 관리하는 특징이 있습니다."
225,OX,데이터베이스,임시제목,"DB를 서버를 복제하는 방식을 DB Replication이라 하며, Replication을 통해 분리된 여러 DB 서버는 read/write가 가능하다.",O,X,,,2,"DB Replication은 데이터베이스를 여러 서버에 복제하는 방식으로, 일반적으로 Master 서버는 읽기/쓰기 가능하며, 복제된 Slave 서버는 읽기 전용(read-only)으로 설정됩니다. 이는 데이터 무결성을 유지하고, 주로 읽기 작업 부하를 분산하기 위해 사용됩니다."
226,OX,자료구조,임시제목,Array는 정보가 자주 삭제되거나 추가되는 데이터를 담기에는 적절하다.,O,X,,,2,"Array는 순차적으로 데이터를 저장하며, 중간에 요소가 삽입되거나 삭제될 경우 그 이후의 요소들을 이동시켜야 합니다. 이러한 특성 때문에 Array는 빈번한 추가나 삭제 작업에 적합하지 않습니다."
227,OX,자료구조,임시제목,Linked List는 검색하고 싶은 원소에 바로 접근 가능하다.,O,X,,,2,"Linked List는 각 노드가 다음 노드를 가리키고 있으므로, 특정 위치에 접근하려면 첫 번째 원소부터 순차적으로 탐색해야 합니다. 원하는 위치에 바로 접근할 수 없다는 단점이 있습니다."
228,OX,자료구조,임시제목,Stack과 Queue는 선형 자료구조이다.,O,X,,,1,"Stack과 Queue는 선형 자료구조로, Stack은 LIFO(Last In First Out), Queue는 FIFO(First In First Out) 방식으로 작동하며, Array나 LinkedList로 구현할 수 있습니다."
229,OX,자료구조,임시제목,Priority Queue는 선형 구조이다.,O,X,,,2,"Priority Queue는 우선순위에 따라 요소를 관리하는 자료구조이며, 일반적으로 트리 구조인 Heap을 사용하여 구현됩니다. 이는 선형 구조가 아닌 트리 구조입니다."
230,OX,자료구조,임시제목,Heap은 데이터를 꺼낼 때 worst case에 O(log N)을 보장한다.,O,X,,,1,Heap은 완전 이진 트리로 구성되어 있어 삽입과 삭제 시 최악의 경우에도 O(log N)의 시간 복잡도를 보장합니다. 이 특성으로 인해 힙은 우선순위 큐로 구현할 때 효율적인 자료구조로 사용됩니다.
231,OX,자료구조,임시제목,힙과 레드블랙트리의 성능차이는 없다.,O,X,,,2,"힙과 레드블랙트리는 구조와 연산 방식에 차이가 있기 때문에 성능에 차이가 발생할 수 있습니다. 특히, 레드블랙트리는 트리의 균형을 유지하는 반면, 힙은 우선순위를 유지하는 데 중점을 둡니다."
232,OX,자료구조,임시제목,B-tree는 균형트리이다.,O,X,,,1,"B-tree는 모든 노드가 균형을 이루며, 노드가 균등하게 분포되어 검색, 삽입, 삭제 연산에서 일정한 성능을 보장하는 균형 트리입니다."
233,OX,자료구조,임시제목,B+tree는 모든 상황에서 B-tree보다 좋다.,O,X,,,2,"B+tree는 인덱스 관리와 범위 검색에서 B-tree보다 효율적일 수 있지만, 모든 상황에서 B-tree보다 우수하지는 않습니다. 예를 들어, 특정 상황에서는 B-tree가 더 효율적일 수 있습니다."
234,OX,자료구조,임시제목,이진트리(Binary Tree)는 높이가 무한정 길어질 수 있다.,O,X,,,1,"이진트리는 단순히 자식 노드가 2개 이하인 구조로, 삽입 방식에 따라 한쪽 방향으로 계속 이어질 수 있어 높이가 무한정 길어질 수 있습니다."
235,OX,자료구조,임시제목,이진 탐색 트리(Binary Search Tree)는 자체균형트리 이다.,O,X,,,2,"이진 탐색 트리는 특정 조건에 따라 삽입되지만, 트리 전체를 재정렬하지 않아 스스로 균형을 유지하지는 않습니다. 따라서 자체균형 트리는 아닙니다."
236,OX,자료구조,임시제목,AVL Tree는 작업의 상한선이 O(logN) 유지된다.,O,X,,,1,AVL 트리는 삽입 및 삭제 시 균형을 유지하도록 트리를 재구성하여 작업 시간의 상한선을 O(logN)으로 유지합니다. AVL 트리는 높이 균형을 유지하는 이진 탐색 트리의 일종입니다.
237,OX,자료구조,임시제목,이진탐색 트리(BST)의 평균 시간 복잡도는 O(logn)이며 최악의 시간 복잡도는 O(n)이다.,O,X,,,1,"이진탐색 트리(BST)의 평균 시간 복잡도는 O(logn)이며, 트리가 한쪽으로 치우치는 경우 최악의 시간 복잡도는 O(n)입니다."
238,OX,자료구조,임시제목,자바에서 HashSet이 HashMap보다 성능이 좋다.,O,X,,,2,HashSet은 내부적으로 HashMap을 사용해 구현되므로 성능 차이가 없습니다.
239,OX,자료구조,임시제목,자바 ArrayList의 contains 시간복잡도는 O(n)이다.,O,X,,,1,ArrayList의 contains 메서드는 요소를 순차적으로 검색하므로 시간 복잡도는 O(n)입니다.
240,OX,자료구조,임시제목,자바에서 HashMap과 달리 HashTable의 특징은 Thread-safe한 것이다.,O,X,,,1,HashTable은 모든 메서드가 synchronized로 선언되어 있어 Thread-safe한 특징을 가집니다.
241,OX,자료구조,임시제목,자바의 ConcurrentHashMap은 검색 속도 향상을 위해 나온 클래스이다.,O,X,,,2,ConcurrentHashMap은 멀티 스레드 환경에서 안전한 동시 접근을 지원하기 위해 나온 클래스입니다. 검색 속도 향상이 주요 목적은 아닙니다.
242,OX,자료구조,임시제목,자바에서 map을 사용할 때 입력 순서를 보장할 수 있는 방법은 없다.,O,X,,,2,"입력 순서를 보장하는 Map이 필요할 경우, 자바의 LinkedHashMap을 사용할 수 있습니다."
243,OX,자료구조,임시제목,레드 블랙트리는 자기 균형 이진 탐색 트리이다.,O,X,,,1,"레드 블랙트리는 균형을 유지하는 이진 탐색 트리로, 자기 균형 트리의 일종입니다."
244,OX,자료구조,임시제목,자바의 HashMap은 해쉬 충돌이 생겼을 때 개방 주소법(Open Addressing)을 사용한다.,O,X,,,2,자바의 HashMap은 해시 충돌이 발생하면 개방 주소법이 아닌 체이닝 방식을 사용해 충돌을 해결합니다.
245,OX,자료구조,임시제목,자바의 HashMap 버킷 크기는 고정이다.,O,X,,,2,"HashMap의 버킷 크기는 기본값으로 시작하지만, 데이터 개수가 임계점에 도달할 때마다 크기를 두 배로 확장합니다."
246,OX,자료구조,임시제목,자바의 HashMap은 해시 버킷 체이닝에 LinkedList만 사용한다.,O,X,,,2,"HashMap은 해시 버킷에 충돌이 발생하면 처음에는 LinkedList를 사용하고, 체이닝 된 요소가 많아지면 Red-Black Tree로 전환합니다."
247,OX,자료구조,임시제목,선택정렬의 시간복잡도는 최선 평균 최악 모두 O(n^2)이다. (O / X),O,X,,,1,선택 정렬은 모든 경우에 대해 O(n^2) 시간 복잡도를 가집니다. 정렬된 배열에서도 각 요소를 반복하여 비교해야 하기 때문입니다.
248,OX,자료구조,임시제목,삽입정렬은 최선의 경우에는 O(n)의 시간복잡도를 가지게 된다. (O / X),O,X,,,1,"삽입 정렬은 최선의 경우(이미 정렬된 배열)에는 O(n) 시간 복잡도를 가지며, 매번 한 번만 비교합니다. 그러나 최악의 경우에는 O(n^2)입니다."
249,OX,자료구조,임시제목,버블정렬을 수행할 때 공간복잡도는 O(n^2)이다. (O / X),O,X,,,2,버블 정렬의 공간복잡도는 O(1)입니다. 정렬은 인덱스 스왑만으로 이루어지므로 추가적인 메모리가 필요하지 않습니다.
250,OX,자료구조,임시제목,퀵정렬은 이미 정렬된 데이터에서 매우 효율적이다. (O / X),O,X,,,2,"퀵 정렬은 이미 정렬된 데이터에서는 비효율적이며, 최악의 경우 시간 복잡도가 O(n^2)로 발생할 수 있습니다."
251,OX,자료구조,임시제목,병합정렬은 LinkedList를 사용해서 구현하면 더 효율적이다. (O / X),O,X,,,1,병합 정렬은 배열 대신 LinkedList를 사용할 경우 데이터 복사 없이 노드 포인터 변경만으로 병합이 가능해 효율적입니다.
252,OX,자료구조,임시제목,힙 정렬은 최악의 경우에는 시간복잡도가 O(n^2)이 나올 수 있다. (O / X),O,X,,,2,"힙 정렬의 최악, 평균, 최선 모두 O(n log n)의 시간 복잡도를 가지며, O(n^2)으로 나올 수 없습니다."
